openapi: 3.0.0
info:
  title: Beacon API
  description: Example API for managing beacons
  version: 1.0.0
tags:
  - name: beacons
    description: Endpoints related to beacons
  - name: recipients
    description: Endpoints related to recipients
  - name: groups
    description: Endpoints related to groups
paths:
  /beacons:
    get:
      summary: List all beacons
      tags:
        - beacons
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: A list of beacons
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Beacon'
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMsg'
  /beacons/{beaconId}:
    parameters:
        - $ref: '#/components/parameters/beaconId'
    get:
      summary: Get a specific beacon by ID
      tags:
        - beacons
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: The beacon
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beacon'
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMsg'
  /recipients:
    get:
      summary: List all recipients
      tags:
        - recipients
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: A list of recipients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipient'
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMsg'
    post:
      summary: Create a new recipient
      tags:
        - recipients
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        $ref: '#/components/requestBodies/CreateRecipient'
      responses:
        '201':
          description: The created recipient
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipient'
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMsg'
  /recipients/{recipientId}:
    parameters:
      - $ref: '#/components/parameters/recipientId'
    get:
      summary: Get a specific recipient by ID
      tags:
        - recipients
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: The recipient
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipient'
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMsg'
    put:
      summary: Update an existing recipient
      tags:
        - recipients
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        $ref: '#/components/requestBodies/UpdateRecipient'
      responses:
        '200':
          description: The updated recipient
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipient'
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMsg'
    delete:
      summary: Delete a recipient by ID
      tags:
        - recipients
      security:
        - bearerAuth: [ ]
      responses:
        '204':
          description: The recipient was deleted successfully
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMsg'
  /groups:
    get:
      summary: List all groups
      tags:
        - groups
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: A list of groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMsg'
    post:
      summary: Create a new group
      tags:
        - groups
      requestBody:
        required: true
        $ref: '#/components/requestBodies/CreateGroup'
      responses:
        '201':
          description: The created group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMsg'
  /groups/{groupId}:
    parameters:
      - $ref: '#/components/parameters/groupId'
    get:
      summary: Retrieve a specific group by ID
      tags:
        - groups
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: The group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMsg'
    put:
      summary: Update a group's name, description, and recipient list
      tags:
        - groups
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        $ref: '#/components/requestBodies/UpdateGroup'
      responses:
        '200':
          description: The updated group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMsg'
    delete:
      summary: Delete a group by ID
      tags:
        - groups
      security:
        - bearerAuth: [ ]
      responses:
        '204':
          description: No Content
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMsg'
  /groups/{groupId}/count/beacon:
    parameters:
      - $ref: '#/components/parameters/groupId'
    get:
      summary: Get the number of beacons in a group
      tags:
        - groups
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: The number of beacons in the group
          content:
            application/json:
              schema:
                type: integer
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMsg'
  /groups/{groupId}/count/event:
    parameters:
      - $ref: '#/components/parameters/groupId'
    get:
      summary: Get the number of events in a group
      tags:
        - groups
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: The number of events in the group
          content:
            application/json:
              schema:
                type: integer
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMsg'
  /groups/{groupId}/count/recipients:
    parameters:
      - $ref: '#/components/parameters/groupId'
    get:
      summary: Get the number of recipients in a group
      tags:
        - groups
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: The number of recipients in the group
          content:
            application/json:
              schema:
                type: integer
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMsg'
  /groups/{groupId}/events:
    parameters:
      - $ref: '#/components/parameters/groupId'
    get:
      summary: List all events for a group
      tags:
        - groups
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: A list of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMsg'
  /groups/{groupId}/recipients:
    parameters:
      - $ref: '#/components/parameters/groupId'
    get:
      summary: List all recipients for a group
      tags:
        - groups
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Recipient'
                  type: array
          description: A list of recipients
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMsg'
          description: Error response
      security:
        - bearerAuth: [ ]
    post:
      summary: Add a list of recipients to a group
      tags:
        - groups
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        $ref: '#/components/requestBodies/AddRecipientsToGroup'
      responses:
        '201':
          description: A list of recipients ids
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMsg'
  /groups/{groupId}/recipients/{recipientId}:
    parameters:
      - $ref: '#/components/parameters/groupId'
      - $ref: '#/components/parameters/recipientId'
    delete:
      summary: Remove a recipient from a group
      tags:
        - groups
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: The recipient was removed from the group
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/Group'
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMsg'
  /events:
    get:
      summary: List all events
      tags:
        - events
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: A list of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMsg'
    post:
      summary: Create a new event
      tags:
        - events
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '201':
          description: The created event
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMsg'
  /events/unacknowledged:
    get:
      summary: List all events unacknowledged events
      tags:
        - events
      security:
        - bearerAuth: [ ]
      parameters:
        - name: load
          in: query
          description: Array of allowed preload fields
          schema:
            type: array
            items:
              type: string
            enum:
              - HostStats
              - Interfaces
              - NetStats
              - UserStats
      responses:
        '200':
          description: A list of events unacknowledged events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMsg'
  /events/{eventId}:
    parameters:
      - $ref: '#/components/parameters/eventId'
    get:
      summary: Retrieve a specific event by ID
      tags:
        - events
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: The event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMsg'
  /events/{eventId}/recipients:
        parameters:
            - $ref: '#/components/parameters/eventId'
        get:
          summary: Retrieve a list of recipients for a specific event
          tags:
          - events
          security:
          - bearerAuth: [ ]
          responses:
            '200':
               description: A list of recipients
               content:
                 application/json:
                   schema:
                     type: array
                     items:
                       $ref: '#/components/schemas/Recipient'
            default:
              description: Error response
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ErrorMsg'
  /events/{eventId}/group:
    parameters:
      - $ref: '#/components/parameters/eventId'
    get:
      summary: Retrieve the group for a specific event
      tags:
        - events
      security:
        - bearerAuth: [ ]
      responses:
        '201':
          description: The group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMsg'
  /events/{eventId}/acknowledge:
    parameters:
      - $ref: '#/components/parameters/eventId'
    post:
        summary: Acknowledge a specific event by ID
        tags:
            - events
        security:
            - bearerAuth: [ ]
        requestBody:
          required: true
          description: The request body for acknowledging events.
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    description: The reason or description for acknowledging the events.
                required:
                  - reason
        responses:
            '200':
              description: The event was acknowledged
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Event'
            default:
              description: Error response
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ErrorMsg'
components:
  securitySchemes:
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
  schemas:
    TenantBaseModel:
      type: object
      properties:
        ID:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426655440000
        CreatedAt:
          type: string
          format: date-time
          example: '2023-03-27T13:00:00Z'
        UpdatedAt:
          type: string
          format: date-time
          example: '2023-03-27T14:00:00Z'
        DeletedAt:
          type: object
          properties:
            Time:
              type: string
              format: date-time
              example: '2023-03-27T15:00:00Z'
            Deleted:
              type: boolean
              example: true
          required:
            - Time
            - Deleted
        TenantID:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426655440000
    Beacon:
      allOf:
        - $ref: '#/components/schemas/TenantBaseModel'
        - type: object
          properties:
            BeaconId:
              type: string
              format: uuid
              example: 123e4567-e89b-12d3-a456-426655440000
            GroupId:
              type: string
              format: uuid
              example: 123e4567-e89b-12d3-a456-426655440000
            OS:
              type: string
              example: Windows
            Arch:
              type: string
              example: x86_64
            Static:
              type: boolean
              example: true
            Upx:
              type: boolean
              example: true
            UpxLevel:
              type: integer
              example: 9
            Gzip:
              type: boolean
              example: true
            Transport:
              type: string
              example: http
            ReportAddr:
              type: string
              example: http://example.com/report
    Group:
      allOf:
        - $ref: '#/components/schemas/TenantBaseModel'
        - type: object
          properties:
            Name:
              type: string
              example: Test Group
            Description:
              type: string
              example: A group for testing
            Priority:
              type: integer
              example: 1
            Beacons:
              type: array
              items:
                $ref: '#/components/schemas/Beacon'
            Recipients:
              type: array
              items:
                $ref: '#/components/schemas/Recipient'
    Recipient:
      allOf:
        - $ref: '#/components/schemas/TenantBaseModel'
        - type: object
          properties:
            Name:
              type: string
              example: Recipient 1
            Type:
              type: string
              example: Email
            ContactInfo:
              type: string
              example: test@example.com
            Description:
              type: string
              example: A recipient for testing
            Groups:
              type: array
              items:
                $ref: '#/components/schemas/Group'
    Event:
      allOf:
        - $ref: '#/components/schemas/TenantBaseModel'
        - properties:
            beaconID:
              type: string
              format: uuid
            binaryName:
              type: string
            arguments:
              type: string
            hostStat:
              $ref: "#/components/schemas/HostStat"
            userStat:
              type: array
              items:
                $ref: "#/components/schemas/UserStat"
            netStat:
              type: array
              items:
                $ref: "#/components/schemas/NetStat"
            interfaces:
              type: array
              items:
                $ref: "#/components/schemas/Interface"

    UserStat:
      allOf:
        - $ref: "#/components/schemas/TenantBaseModel"
        - properties:
            eventID:
              type: string
              format: uuid
            user:
              type: string
            terminal:
              type: string
            host:
              type: string
            started:
              type: integer
              format: uint32

    HostStat:
      allOf:
        - $ref: "#/components/schemas/TenantBaseModel"
        - properties:
            eventID:
              type: string
              format: uuid
            hostname:
              type: string
            uptime:
              type: integer
              format: uint64
            bootTime:
              type: integer
              format: uint64
            procs:
              type: integer
              format: uint64
            os:
              type: string
            platform:
              type: string
            platformFamily:
              type: string
            platformVersion:
              type: string
            kernelVersion:
              type: string
            kernelArch:
              type: string
            virtualizationSystem:
              type: string
            virtualizationRole:
              type: string
            hostID:
              type: string

    NetStat:
      allOf:
        - $ref: "#/components/schemas/TenantBaseModel"
        - properties:
            eventID:
              type: string
              format: uuid
            remoteAddress:
              type: string
            localAddress:
              type: string
            status:
              type: string

    Interface:
      allOf:
        - $ref: "#/components/schemas/TenantBaseModel"
        - properties:
            eventID:
              type: string
              format: uuid
            name:
              type: string
            ipAddresses:
              type: string
    ErrorMsg:
        type: object
        properties:
          code:
            type: string
            example: invalid_request
            description: A unique error code for the specific type of error
          message:
            type: string
            example: Invalid request parameters
            description: A human-readable error message describing the error
        required:
            - code
            - message
  responses:
  requestBodies:

    Error:
      description: An error occurred
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                example: invalid_request
                description: A unique error code for the specific type of error
              message:
                type: string
                example: Invalid request parameters
                description: A human-readable error message describing the error
            required:
              - code
              - message
    CreateRecipient:
      description: Create a new recipient
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - type
              - contactInfo
            properties:
              name:
                type: string
                minLength: 2
                maxLength: 50
                example: Mr Recipient
              description:
                type: string
                example: A description of the recipient
              type:
                type: string
                example: Email
              contactInfo:
                type: string
                example:
    UpdateRecipient:
      description: Update an existing recipient
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - type
              - contactInfo
            properties:
              name:
                type: string
                minLength: 2
                maxLength: 50
                example: My Recipient
              description:
                type: string
                example: A description of the recipient
              type:
                type: string
                example: Email
              contactInfo:
                type: string
                example:
    AddRecipientsToGroup:
      description: Add recipients to a group
      content:
        application/json:
          schema:
            type: array
            items:
              type: string
              format: uuid
    CreateGroup:
      description: Create a new group
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - description
            properties:
              name:
                type: string
                minLength: 2
                maxLength: 50
                example: My Group
              description:
                type: string
                example: A description of my resource
    UpdateGroup:
      description: Update an existing group
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - description
            properties:
              name:
                type: string
                minLength: 2
                maxLength: 50
                example: New Group Name
              description:
                type: string
                example: A new description of my resource
  parameters:
    beaconId:
      name: beaconId
      in: path
      description: The UUID identifier of the beacon
      required: true
      schema:
        type: string
        format: uuid
        description: Unique identifier of the beacon on UUID format
      example: a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
    recipientId:
      name: recipientId
      in: path
      description: The UUID identifier of the recipient
      required: true
      schema:
        type: string
        format: uuid
        description: Unique identifier of the recipient on UUID format
      example: a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
    groupId:
      name: groupId
      in: path
      description: The UUID identifier of the group
      required: true
      schema:
        type: string
        format: uuid
        description: Unique identifier of the group on UUID format
      example: a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
    eventId:
        name: eventId
        in: path
        description: The UUID identifier of the event
        required: true
        schema:
          type: string
          format: uuid
          description: Unique identifier of the event on UUID format
        example: a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11