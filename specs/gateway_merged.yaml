openapi: 3.0.0
info:
  description: A gateway for managing different APIs
  title: Gateway API
  version: 1.0.0
paths:
  /beacons:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Beacon'
                type: array
          description: A list of beacons
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMsg'
          description: Error response
      security:
        - bearerAuth: []
      summary: List all beacons
      tags:
        - beacons
  /beacons/{beaconId}:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beacon'
          description: The beacon
        default:
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      summary: Get a specific beacon by ID
      tags:
        - beacons
    parameters:
      - $ref: '#/components/parameters/beaconId'
  /creator:
    post:
      parameters:
        - $ref: '#/components/parameters/ReportAddr'
        - $ref: '#/components/parameters/OS'
        - $ref: '#/components/parameters/Arch'
        - $ref: '#/components/parameters/GroupUUID'
        - $ref: '#/components/parameters/Static'
        - $ref: '#/components/parameters/Upx'
        - $ref: '#/components/parameters/UpxLevel'
        - $ref: '#/components/parameters/Gzip'
        - $ref: '#/components/parameters/Debug'
        - $ref: '#/components/parameters/Lldflags'
        - $ref: '#/components/parameters/Transport'
      requestBody:
        $ref: '#/components/requestBodies/BinaryFile'
        required: true
      responses:
        "200":
          $ref: '#/components/responses/Beacon'
          required: true
        default:
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      summary: Create a new beacon.
      tags:
        - Creator
  /creator/distlist:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Dist'
                type: array
          description: A list of supported OS and Arch combinations
        default:
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      summary: List all supported OS and Arch combinations
      tags:
        - Creator
  /events:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Event'
                type: array
          description: A list of events
        default:
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      summary: List all events
      tags:
        - events
    post:
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
        required: true
      responses:
        "201":
          description: The created event
        default:
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      summary: Create a new event
      tags:
        - events
  /events/{eventId}:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: The event
        default:
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      summary: Retrieve a specific event by ID
      tags:
        - events
    parameters:
      - $ref: '#/components/parameters/eventId'
  /events/{eventId}/acknowledge:
    parameters:
      - $ref: '#/components/parameters/eventId'
    post:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                comment:
                  description: The reason or description for acknowledging the events.
                  type: string
              required:
                - comment
              type: object
        description: The request body for acknowledging events.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Acknowledgement'
          description: The event was acknowledged
        default:
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      summary: Acknowledge a specific event by ID
      tags:
        - events
  /events/{eventId}/group:
    get:
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: The group
        default:
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      summary: Retrieve the group for a specific event
      tags:
        - events
    parameters:
      - $ref: '#/components/parameters/eventId'
  /events/{eventId}/recipients:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Recipient'
                type: array
          description: A list of recipients
        default:
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      summary: Retrieve a list of recipients for a specific event
      tags:
        - events
    parameters:
      - $ref: '#/components/parameters/eventId'
  /events/unacknowledged:
    get:
      parameters:
        - $ref: '#/components/parameters/Preloads'
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Event'
                type: array
          description: A list of events unacknowledged events
        default:
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      summary: List all events unacknowledged events
      tags:
        - events
  /groups:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Group'
                type: array
          description: A list of groups
        default:
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      summary: List all groups
      tags:
        - groups
    post:
      requestBody:
        $ref: '#/components/requestBodies/CreateGroup'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: The created group
        default:
          $ref: '#/components/responses/Error'
      summary: Create a new group
      tags:
        - groups
  /groups/{groupId}:
    delete:
      responses:
        "204":
          description: No Content
        default:
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      summary: Delete a group by ID
      tags:
        - groups
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: The group
        default:
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      summary: Retrieve a specific group by ID
      tags:
        - groups
    parameters:
      - $ref: '#/components/parameters/groupId'
    put:
      $ref: '#/components/responses/Error'
      requestBody:
        $ref: '#/components/requestBodies/UpdateGroup'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: The updated group
        default: null
      security:
        - bearerAuth: []
      summary: Update a group's name, description, and recipient list
      tags:
        - groups
  /groups/{groupId}/count/beacon:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                type: integer
          description: The number of beacons in the group
        default:
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      summary: Get the number of beacons in a group
      tags:
        - groups
    parameters:
      - $ref: '#/components/parameters/groupId'
  /groups/{groupId}/count/event:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                type: integer
          description: The number of events in the group
        default:
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      summary: Get the number of events in a group
      tags:
        - groups
    parameters:
      - $ref: '#/components/parameters/groupId'
  /groups/{groupId}/count/recipients:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                type: integer
          description: The number of recipients in the group
        default:
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      summary: Get the number of recipients in a group
      tags:
        - groups
    parameters:
      - $ref: '#/components/parameters/groupId'
  /groups/{groupId}/events:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Event'
                type: array
          description: A list of events
        default:
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      summary: List all events for a group
      tags:
        - groups
    parameters:
      - $ref: '#/components/parameters/groupId'
  /groups/{groupId}/recipients:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Recipient'
                  type: array
          description: A list of recipients
        default:
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      summary: List all recipients for a group
      tags:
        - groups
    parameters:
      - $ref: '#/components/parameters/groupId'
    post:
      requestBody:
        $ref: '#/components/requestBodies/AddRecipientsToGroup'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: A list of recipients ids
        default:
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      summary: Add a list of recipients to a group
      tags:
        - groups
  /groups/{groupId}/recipients/{recipientId}:
    delete:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: The recipient was removed from the group
        default:
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      summary: Remove a recipient from a group
      tags:
        - groups
    parameters:
      - $ref: '#/components/parameters/groupId'
      - $ref: '#/components/parameters/recipientId'
  /recipients:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Recipient'
                type: array
          description: A list of recipients
        default:
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      summary: List all recipients
      tags:
        - recipients
    post:
      requestBody:
        $ref: '#/components/requestBodies/CreateRecipient'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipient'
          description: The created recipient
        default:
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      summary: Create a new recipient
      tags:
        - recipients
  /recipients/{recipientId}:
    delete:
      responses:
        "204":
          description: The recipient was deleted successfully
        default:
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      summary: Delete a recipient by ID
      tags:
        - recipients
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipient'
          description: The recipient
        default:
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      summary: Get a specific recipient by ID
      tags:
        - recipients
    parameters:
      - $ref: '#/components/parameters/recipientId'
    put:
      requestBody:
        $ref: '#/components/requestBodies/UpdateRecipient'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipient'
          description: The updated recipient
        default:
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      summary: Update an existing recipient
      tags:
        - recipients
  /ws:
    get:
      description: Use this endpoint to establish a WebSocket connection and receive events.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WsEvent'
          description: Successfully connected to the WebSocket.
      servers:
        - url: ws://127.0.0.1:9000/ws
      summary: Receive events via WebSocket
      tags:
        - WebSocket
      x-websocket: true
components:
  parameters:
    Arch:
      description: The architecture of the beacon.
      in: query
      name: arch
      required: true
      schema:
        example: x86_64
        type: string
    Debug:
      description: Include debug information in the beacon
      in: query
      name: debug
      schema:
        default: true
        example: true
        type: boolean
    GroupUUID:
      description: The UUID of the group.
      in: query
      name: group_uuid
      schema:
        example: 123e4567-e89b-12d3-a456-426655440000
        format: uuid
        type: string
    Gzip:
      description: Indicates if the beacon is compressed using Gzip.
      in: query
      name: gzip
      schema:
        default: true
        example: true
        type: boolean
    Lldflags:
      description: The lldflags used to build the beacon.
      in: query
      name: lldflags
      schema:
        default: -s -w
        example: http
        type: string
    OS:
      description: The operating system of the beacon.
      in: query
      name: os
      required: true
      schema:
        example: Windows
        type: string
    Preloads:
      description: Array of allowed preload fields
      in: query
      name: load
      schema:
        items:
          type: string
        type: array
    ReportAddr:
      description: The URL of the report server.
      in: query
      name: report_addr
      required: true
      schema:
        example: http://example.com/report
        type: string
    Static:
      description: Indicates if the beacon is static.
      in: query
      name: static
      schema:
        default: false
        example: true
        type: boolean
    Transport:
      description: The transport protocol used by the beacon.
      in: query
      name: transport
      schema:
        default: dns
        example: http
        type: string
    Upx:
      description: Indicates if the beacon is compressed using UPX.
      in: query
      name: upx
      schema:
        default: false
        example: true
        type: boolean
    UpxLevel:
      description: The compression level used by UPX.
      in: query
      name: upx_level
      schema:
        default: 1
        example: 9
        type: integer
    beaconId:
      description: The UUID identifier of the beacon
      example: a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
      in: path
      name: beaconId
      required: true
      schema:
        description: Unique identifier of the beacon on UUID format
        format: uuid
        type: string
    eventId:
      description: The UUID identifier of the event
      example: a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
      in: path
      name: eventId
      required: true
      schema:
        description: Unique identifier of the event on UUID format
        format: uuid
        type: string
    groupId:
      description: The UUID identifier of the group
      example: a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
      in: path
      name: groupId
      required: true
      schema:
        description: Unique identifier of the group on UUID format
        format: uuid
        type: string
    recipientId:
      description: The UUID identifier of the recipient
      example: a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
      in: path
      name: recipientId
      required: true
      schema:
        description: Unique identifier of the recipient on UUID format
        format: uuid
        type: string
  requestBodies:
    AddRecipientsToGroup:
      content:
        application/json:
          schema:
            items:
              format: uuid
              type: string
            type: array
      description: Add recipients to a group
    BinaryFile:
      content:
        application/octet-stream:
          schema:
            format: binary
            type: string
      description: A beacon
    CreateGroup:
      content:
        application/json:
          schema:
            properties:
              description:
                example: A description of my resource
                type: string
              name:
                example: My Group
                maxLength: 50
                minLength: 2
                type: string
            required:
              - name
              - description
            type: object
      description: Create a new group
    CreateRecipient:
      content:
        application/json:
          schema:
            properties:
              contactInfo:
                example: null
                type: string
              description:
                example: A description of the recipient
                type: string
              name:
                example: Mr Recipient
                maxLength: 50
                minLength: 2
                type: string
              type:
                example: Email
                type: string
            required:
              - name
              - type
              - contactInfo
            type: object
      description: Create a new recipient
    UpdateGroup:
      content:
        application/json:
          schema:
            properties:
              description:
                example: A new description of my resource
                type: string
              name:
                example: New Group Name
                maxLength: 50
                minLength: 2
                type: string
            required:
              - name
              - description
            type: object
      description: Update an existing group
    UpdateRecipient:
      content:
        application/json:
          schema:
            properties:
              contactInfo:
                example: null
                type: string
              description:
                example: A description of the recipient
                type: string
              name:
                example: My Recipient
                maxLength: 50
                minLength: 2
                type: string
              type:
                example: Email
                type: string
            required:
              - name
              - type
              - contactInfo
            type: object
      description: Update an existing recipient
  responses:
    Beacon:
      content:
        application/octet-stream:
          schema:
            format: binary
            type: string
      description: A beacon
    Error:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMsg'
      description: Error response
  schemas:
    Acknowledgement:
      allOf:
        - $ref: '#/components/schemas/TenantBaseModel'
        - properties:
            Comment:
              example: This was tod from accounting...
              type: string
            EventId:
              example: 123e4567-e89b-12d3-a456-426655440000
              format: uuid
              type: string
          required:
            - EventId
          type: object
    Beacon:
      allOf:
        - $ref: '#/components/schemas/TenantBaseModel'
        - properties:
            Arch:
              example: x86_64
              type: string
            BeaconId:
              example: 123e4567-e89b-12d3-a456-426655440000
              format: uuid
              type: string
            GroupId:
              example: 123e4567-e89b-12d3-a456-426655440000
              format: uuid
              type: string
            Gzip:
              example: true
              type: boolean
            OS:
              example: Windows
              type: string
            ReportAddr:
              example: 127.0.0.1:53
              type: string
            Static:
              example: true
              type: boolean
            Transport:
              example: http
              type: string
            Upx:
              example: true
              type: boolean
            UpxLevel:
              example: 9
              type: integer
          type: object
    BeaconCreated:
      description: A beacon was created.
      properties:
        BeaconId:
          format: uuid
          type: string
        GroupId:
          format: uuid
          type: string
      required:
        - BeaconId
        - GroupId
      type: object
    Dist:
      properties:
        arch:
          example: x86_64
          type: string
        os:
          example: Windows
          type: string
      type: object
    ErrorMsg:
      properties:
        code:
          description: A unique error code for the specific type of error
          example: invalid_request
          type: string
        message:
          description: A human-readable error message describing the error
          example: Invalid request parameters
          type: string
      required:
        - code
        - message
      type: object
    Event:
      allOf:
        - $ref: '#/components/schemas/TenantBaseModel'
        - properties:
            acknowledgement:
              $ref: '#/components/schemas/Acknowledgement'
            arguments:
              type: string
            beaconID:
              format: uuid
              type: string
            binaryName:
              type: string
            hostStat:
              $ref: '#/components/schemas/HostStat'
            interfaces:
              items:
                $ref: '#/components/schemas/Interface'
              type: array
            netStat:
              items:
                $ref: '#/components/schemas/NetStat'
              type: array
            userStat:
              items:
                $ref: '#/components/schemas/UserStat'
              type: array
          required:
            - beaconID
            - binaryName
          type: object
    EventCreated:
      description: An event was created by a beacon.
      properties:
        Arguments:
          type: string
        BeaconId:
          format: uuid
          type: string
        BinaryName:
          type: string
        EventId:
          format: uuid
          type: string
        Host:
          type: string
      required:
        - EventId
        - BeaconId
        - BinaryName
      type: object
    Group:
      allOf:
        - $ref: '#/components/schemas/TenantBaseModel'
        - properties:
            Beacons:
              items:
                $ref: '#/components/schemas/Beacon'
              type: array
            Description:
              example: A group for testing
              type: string
            Name:
              example: Test Group
              type: string
            Priority:
              example: 1
              type: integer
            Recipients:
              items:
                $ref: '#/components/schemas/Recipient'
              type: array
          type: object
    HostStat:
      allOf:
        - $ref: '#/components/schemas/TenantBaseModel'
        - properties:
            bootTime:
              format: uint64
              type: integer
            eventID:
              format: uuid
              type: string
            hostID:
              type: string
            hostname:
              type: string
            kernelArch:
              type: string
            kernelVersion:
              type: string
            os:
              type: string
            platform:
              type: string
            platformFamily:
              type: string
            platformVersion:
              type: string
            procs:
              format: uint64
              type: integer
            uptime:
              format: uint64
              type: integer
            virtualizationRole:
              type: string
            virtualizationSystem:
              type: string
          required:
            - eventID
            - hostname
            - uptime
            - bootTime
            - procs
            - os
            - platform
            - platformFamily
            - platformVersion
            - kernelVersion
            - kernelArch
            - virtualizationSystem
            - virtualizationRole
            - hostID
          type: object
    Interface:
      allOf:
        - $ref: '#/components/schemas/TenantBaseModel'
        - properties:
            eventID:
              format: uuid
              type: string
            ipAddresses:
              type: string
            name:
              type: string
          required:
            - eventID
            - name
            - ipAddresses
          type: object
    NetStat:
      allOf:
        - $ref: '#/components/schemas/TenantBaseModel'
        - properties:
            eventID:
              format: uuid
              type: string
            localAddress:
              type: string
            remoteAddress:
              type: string
            status:
              type: string
          required:
            - eventID
            - remoteAddress
            - localAddress
            - status
          type: object
    Recipient:
      allOf:
        - $ref: '#/components/schemas/TenantBaseModel'
        - properties:
            ContactInfo:
              example: test@example.com
              type: string
            Description:
              example: A recipient for testing
              type: string
            Groups:
              items:
                $ref: '#/components/schemas/Group'
              type: array
            Name:
              example: Recipient 1
              type: string
            Type:
              example: Email
              type: string
          required:
            - Name
            - Type
            - ContactInfo
          type: object
    TenantBaseModel:
      properties:
        CreatedAt:
          example: "2023-03-27T13:00:00Z"
          format: date-time
          type: string
        DeletedAt:
          example: "2023-03-27T14:00:00Z"
          format: date-time
          type: string
        ID:
          example: 123e4567-e89b-12d3-a456-426655440000
          format: uuid
          type: string
        TenantID:
          example: 123e4567-e89b-12d3-a456-426655440000
          format: uuid
          type: string
        UpdatedAt:
          example: "2023-03-27T14:00:00Z"
          format: date-time
          type: string
      required:
        - ID
        - CreatedAt
        - UpdatedAt
      type: object
    UserStat:
      allOf:
        - $ref: '#/components/schemas/TenantBaseModel'
        - properties:
            eventID:
              format: uuid
              type: string
            host:
              type: string
            started:
              format: uint32
              type: integer
            terminal:
              type: string
            user:
              type: string
          required:
            - eventID
            - user
            - terminal
            - host
            - started
          type: object
    WsEvent:
      description: A WebSocket event.
      properties:
        content:
          type: string
        type:
          oneOf:
            - $ref: '#/components/schemas/BeaconCreated'
            - $ref: '#/components/schemas/EventCreated'
      type: object
  securitySchemes:
    apiKeyAuth:
      in: header
      name: X-API-Key
      type: apiKey
tags:
  - description: WebSocket API
    name: WebSocket
  - description: Endpoints related to beacons
    name: beacons
  - description: Endpoints related to recipients
    name: recipients
  - description: Endpoints related to groups
    name: groups
  - description: Endpoints related to events
    name: events
  - description: API for creating beacons
    name: Creator
  - description: API for checking server health
    name: Health
servers:
  - description: The API server
    url: http://127.0.0.1:9000
