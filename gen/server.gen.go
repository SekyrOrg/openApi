// Package gateway provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package gateway

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all beacons
	// (GET /beacons)
	GetBeacons(c *gin.Context)
	// Create a new beacon.
	// (POST /beacons)
	PostBeacons(c *gin.Context, params PostBeaconsParams)
	// Delete a beacon by ID
	// (DELETE /beacons/{beaconId})
	DeleteBeaconsBeaconId(c *gin.Context, beaconId openapi_types.UUID)
	// Get a specific beacon by ID
	// (GET /beacons/{beaconId})
	GetBeaconsBeaconId(c *gin.Context, beaconId openapi_types.UUID)
	// List all groups
	// (GET /groups)
	GetGroups(c *gin.Context)
	// Create a new group
	// (POST /groups)
	PostGroups(c *gin.Context)
	// Delete a group by ID
	// (DELETE /groups/{groupId})
	DeleteGroupsGroupId(c *gin.Context, groupId openapi_types.UUID)
	// Get a specific group by ID
	// (GET /groups/{groupId})
	GetGroupsGroupId(c *gin.Context, groupId openapi_types.UUID)
	// Update an existing group
	// (PUT /groups/{groupId})
	PutGroupsGroupId(c *gin.Context, groupId openapi_types.UUID)
	// List all recipients
	// (GET /recipients)
	GetRecipients(c *gin.Context)
	// Create a new recipient
	// (POST /recipients)
	PostRecipients(c *gin.Context)
	// Delete a recipient by ID
	// (DELETE /recipients/{recipientId})
	DeleteRecipientsRecipientId(c *gin.Context, recipientId openapi_types.UUID)
	// Get a specific recipient by ID
	// (GET /recipients/{recipientId})
	GetRecipientsRecipientId(c *gin.Context, recipientId openapi_types.UUID)
	// Update an existing recipient
	// (PUT /recipients/{recipientId})
	PutRecipientsRecipientId(c *gin.Context, recipientId openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetBeacons operation middleware
func (siw *ServerInterfaceWrapper) GetBeacons(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetBeacons(c)
}

// PostBeacons operation middleware
func (siw *ServerInterfaceWrapper) PostBeacons(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostBeaconsParams

	// ------------- Required query parameter "ReportAddr" -------------

	if paramValue := c.Query("ReportAddr"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument ReportAddr is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "ReportAddr", c.Request.URL.Query(), &params.ReportAddr)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ReportAddr: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "OS" -------------

	if paramValue := c.Query("OS"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument OS is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "OS", c.Request.URL.Query(), &params.OS)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter OS: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "Arch" -------------

	if paramValue := c.Query("Arch"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument Arch is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "Arch", c.Request.URL.Query(), &params.Arch)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Arch: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "BeaconId" -------------

	err = runtime.BindQueryParameter("form", true, false, "BeaconId", c.Request.URL.Query(), &params.BeaconId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter BeaconId: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "GroupId" -------------

	err = runtime.BindQueryParameter("form", true, false, "GroupId", c.Request.URL.Query(), &params.GroupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter GroupId: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "Static" -------------

	err = runtime.BindQueryParameter("form", true, false, "Static", c.Request.URL.Query(), &params.Static)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Static: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "Upx" -------------

	err = runtime.BindQueryParameter("form", true, false, "Upx", c.Request.URL.Query(), &params.Upx)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Upx: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "UpxLevel" -------------

	err = runtime.BindQueryParameter("form", true, false, "UpxLevel", c.Request.URL.Query(), &params.UpxLevel)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter UpxLevel: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "Gzip" -------------

	err = runtime.BindQueryParameter("form", true, false, "Gzip", c.Request.URL.Query(), &params.Gzip)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Gzip: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "Transport" -------------

	err = runtime.BindQueryParameter("form", true, false, "Transport", c.Request.URL.Query(), &params.Transport)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Transport: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostBeacons(c, params)
}

// DeleteBeaconsBeaconId operation middleware
func (siw *ServerInterfaceWrapper) DeleteBeaconsBeaconId(c *gin.Context) {

	var err error

	// ------------- Path parameter "beaconId" -------------
	var beaconId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "beaconId", c.Param("beaconId"), &beaconId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter beaconId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteBeaconsBeaconId(c, beaconId)
}

// GetBeaconsBeaconId operation middleware
func (siw *ServerInterfaceWrapper) GetBeaconsBeaconId(c *gin.Context) {

	var err error

	// ------------- Path parameter "beaconId" -------------
	var beaconId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "beaconId", c.Param("beaconId"), &beaconId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter beaconId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetBeaconsBeaconId(c, beaconId)
}

// GetGroups operation middleware
func (siw *ServerInterfaceWrapper) GetGroups(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetGroups(c)
}

// PostGroups operation middleware
func (siw *ServerInterfaceWrapper) PostGroups(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostGroups(c)
}

// DeleteGroupsGroupId operation middleware
func (siw *ServerInterfaceWrapper) DeleteGroupsGroupId(c *gin.Context) {

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "groupId", c.Param("groupId"), &groupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter groupId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteGroupsGroupId(c, groupId)
}

// GetGroupsGroupId operation middleware
func (siw *ServerInterfaceWrapper) GetGroupsGroupId(c *gin.Context) {

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "groupId", c.Param("groupId"), &groupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter groupId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetGroupsGroupId(c, groupId)
}

// PutGroupsGroupId operation middleware
func (siw *ServerInterfaceWrapper) PutGroupsGroupId(c *gin.Context) {

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "groupId", c.Param("groupId"), &groupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter groupId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutGroupsGroupId(c, groupId)
}

// GetRecipients operation middleware
func (siw *ServerInterfaceWrapper) GetRecipients(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetRecipients(c)
}

// PostRecipients operation middleware
func (siw *ServerInterfaceWrapper) PostRecipients(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostRecipients(c)
}

// DeleteRecipientsRecipientId operation middleware
func (siw *ServerInterfaceWrapper) DeleteRecipientsRecipientId(c *gin.Context) {

	var err error

	// ------------- Path parameter "recipientId" -------------
	var recipientId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "recipientId", c.Param("recipientId"), &recipientId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter recipientId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteRecipientsRecipientId(c, recipientId)
}

// GetRecipientsRecipientId operation middleware
func (siw *ServerInterfaceWrapper) GetRecipientsRecipientId(c *gin.Context) {

	var err error

	// ------------- Path parameter "recipientId" -------------
	var recipientId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "recipientId", c.Param("recipientId"), &recipientId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter recipientId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetRecipientsRecipientId(c, recipientId)
}

// PutRecipientsRecipientId operation middleware
func (siw *ServerInterfaceWrapper) PutRecipientsRecipientId(c *gin.Context) {

	var err error

	// ------------- Path parameter "recipientId" -------------
	var recipientId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "recipientId", c.Param("recipientId"), &recipientId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter recipientId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutRecipientsRecipientId(c, recipientId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/beacons", wrapper.GetBeacons)

	router.POST(options.BaseURL+"/beacons", wrapper.PostBeacons)

	router.DELETE(options.BaseURL+"/beacons/:beaconId", wrapper.DeleteBeaconsBeaconId)

	router.GET(options.BaseURL+"/beacons/:beaconId", wrapper.GetBeaconsBeaconId)

	router.GET(options.BaseURL+"/groups", wrapper.GetGroups)

	router.POST(options.BaseURL+"/groups", wrapper.PostGroups)

	router.DELETE(options.BaseURL+"/groups/:groupId", wrapper.DeleteGroupsGroupId)

	router.GET(options.BaseURL+"/groups/:groupId", wrapper.GetGroupsGroupId)

	router.PUT(options.BaseURL+"/groups/:groupId", wrapper.PutGroupsGroupId)

	router.GET(options.BaseURL+"/recipients", wrapper.GetRecipients)

	router.POST(options.BaseURL+"/recipients", wrapper.PostRecipients)

	router.DELETE(options.BaseURL+"/recipients/:recipientId", wrapper.DeleteRecipientsRecipientId)

	router.GET(options.BaseURL+"/recipients/:recipientId", wrapper.GetRecipientsRecipientId)

	router.PUT(options.BaseURL+"/recipients/:recipientId", wrapper.PutRecipientsRecipientId)

	return router
}
