// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// Beacon defines model for Beacon.
type Beacon struct {
	Arch      *string             `json:"Arch,omitempty"`
	BeaconId  *openapi_types.UUID `json:"BeaconId,omitempty"`
	CreatedAt *time.Time          `json:"CreatedAt,omitempty"`
	DeletedAt *struct {
		Deleted bool      `json:"Deleted"`
		Time    time.Time `json:"Time"`
	} `json:"DeletedAt,omitempty"`
	GroupId    *openapi_types.UUID `json:"GroupId,omitempty"`
	Gzip       *bool               `json:"Gzip,omitempty"`
	ID         *openapi_types.UUID `json:"ID,omitempty"`
	OS         *string             `json:"OS,omitempty"`
	ReportAddr *string             `json:"ReportAddr,omitempty"`
	Static     *bool               `json:"Static,omitempty"`
	TenantID   *openapi_types.UUID `json:"TenantID,omitempty"`
	Transport  *string             `json:"Transport,omitempty"`
	UpdatedAt  *time.Time          `json:"UpdatedAt,omitempty"`
	Upx        *bool               `json:"Upx,omitempty"`
	UpxLevel   *int                `json:"UpxLevel,omitempty"`
}

// Group defines model for Group.
type Group struct {
	Beacons   *[]Beacon  `json:"Beacons,omitempty"`
	CreatedAt *time.Time `json:"CreatedAt,omitempty"`
	DeletedAt *struct {
		Deleted bool      `json:"Deleted"`
		Time    time.Time `json:"Time"`
	} `json:"DeletedAt,omitempty"`
	Description *string             `json:"Description,omitempty"`
	ID          *openapi_types.UUID `json:"ID,omitempty"`
	Name        *string             `json:"Name,omitempty"`
	Priority    *int                `json:"Priority,omitempty"`
	Recipients  *[]Recipient        `json:"Recipients,omitempty"`
	TenantID    *openapi_types.UUID `json:"TenantID,omitempty"`
	UpdatedAt   *time.Time          `json:"UpdatedAt,omitempty"`
}

// Recipient defines model for Recipient.
type Recipient struct {
	ContactInfo *string    `json:"ContactInfo,omitempty"`
	CreatedAt   *time.Time `json:"CreatedAt,omitempty"`
	DeletedAt   *struct {
		Deleted bool      `json:"Deleted"`
		Time    time.Time `json:"Time"`
	} `json:"DeletedAt,omitempty"`
	Description *string             `json:"Description,omitempty"`
	Groups      *[]Group            `json:"Groups,omitempty"`
	ID          *openapi_types.UUID `json:"ID,omitempty"`
	Name        *string             `json:"Name,omitempty"`
	TenantID    *openapi_types.UUID `json:"TenantID,omitempty"`
	Type        *string             `json:"Type,omitempty"`
	UpdatedAt   *time.Time          `json:"UpdatedAt,omitempty"`
}

// TenantBaseModel defines model for TenantBaseModel.
type TenantBaseModel struct {
	CreatedAt *time.Time `json:"CreatedAt,omitempty"`
	DeletedAt *struct {
		Deleted bool      `json:"Deleted"`
		Time    time.Time `json:"Time"`
	} `json:"DeletedAt,omitempty"`
	ID        *openapi_types.UUID `json:"ID,omitempty"`
	TenantID  *openapi_types.UUID `json:"TenantID,omitempty"`
	UpdatedAt *time.Time          `json:"UpdatedAt,omitempty"`
}

// ForbiddenError defines model for ForbiddenError.
type ForbiddenError struct {
	Error   *string `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
}

// NotFoundError defines model for NotFoundError.
type NotFoundError struct {
	Error   *string `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
}

// PostGroupsJSONRequestBody defines body for PostGroups for application/json ContentType.
type PostGroupsJSONRequestBody = Group

// PutGroupsGroupIdJSONRequestBody defines body for PutGroupsGroupId for application/json ContentType.
type PutGroupsGroupIdJSONRequestBody = Group

// PostRecipientsJSONRequestBody defines body for PostRecipients for application/json ContentType.
type PostRecipientsJSONRequestBody = Recipient

// PutRecipientsRecipientIdJSONRequestBody defines body for PutRecipientsRecipientId for application/json ContentType.
type PutRecipientsRecipientIdJSONRequestBody = Recipient

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all beacons
	// (GET /beacons)
	GetBeacons(c *gin.Context)
	// Delete a beacon by ID
	// (DELETE /beacons/{beaconId})
	DeleteBeaconsBeaconId(c *gin.Context, beaconId openapi_types.UUID)
	// Get a specific beacon by ID
	// (GET /beacons/{beaconId})
	GetBeaconsBeaconId(c *gin.Context, beaconId openapi_types.UUID)
	// List all groups
	// (GET /groups)
	GetGroups(c *gin.Context)
	// Create a new group
	// (POST /groups)
	PostGroups(c *gin.Context)
	// Delete a group by ID
	// (DELETE /groups/{groupId})
	DeleteGroupsGroupId(c *gin.Context, groupId openapi_types.UUID)
	// Get a specific group by ID
	// (GET /groups/{groupId})
	GetGroupsGroupId(c *gin.Context, groupId openapi_types.UUID)
	// Update an existing group
	// (PUT /groups/{groupId})
	PutGroupsGroupId(c *gin.Context, groupId openapi_types.UUID)
	// List all recipients
	// (GET /recipients)
	GetRecipients(c *gin.Context)
	// Create a new recipient
	// (POST /recipients)
	PostRecipients(c *gin.Context)
	// Delete a recipient by ID
	// (DELETE /recipients/{recipientId})
	DeleteRecipientsRecipientId(c *gin.Context, recipientId openapi_types.UUID)
	// Get a specific recipient by ID
	// (GET /recipients/{recipientId})
	GetRecipientsRecipientId(c *gin.Context, recipientId openapi_types.UUID)
	// Update an existing recipient
	// (PUT /recipients/{recipientId})
	PutRecipientsRecipientId(c *gin.Context, recipientId openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetBeacons operation middleware
func (siw *ServerInterfaceWrapper) GetBeacons(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetBeacons(c)
}

// DeleteBeaconsBeaconId operation middleware
func (siw *ServerInterfaceWrapper) DeleteBeaconsBeaconId(c *gin.Context) {

	var err error

	// ------------- Path parameter "beaconId" -------------
	var beaconId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "beaconId", c.Param("beaconId"), &beaconId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter beaconId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteBeaconsBeaconId(c, beaconId)
}

// GetBeaconsBeaconId operation middleware
func (siw *ServerInterfaceWrapper) GetBeaconsBeaconId(c *gin.Context) {

	var err error

	// ------------- Path parameter "beaconId" -------------
	var beaconId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "beaconId", c.Param("beaconId"), &beaconId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter beaconId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetBeaconsBeaconId(c, beaconId)
}

// GetGroups operation middleware
func (siw *ServerInterfaceWrapper) GetGroups(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetGroups(c)
}

// PostGroups operation middleware
func (siw *ServerInterfaceWrapper) PostGroups(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostGroups(c)
}

// DeleteGroupsGroupId operation middleware
func (siw *ServerInterfaceWrapper) DeleteGroupsGroupId(c *gin.Context) {

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "groupId", c.Param("groupId"), &groupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter groupId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteGroupsGroupId(c, groupId)
}

// GetGroupsGroupId operation middleware
func (siw *ServerInterfaceWrapper) GetGroupsGroupId(c *gin.Context) {

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "groupId", c.Param("groupId"), &groupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter groupId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetGroupsGroupId(c, groupId)
}

// PutGroupsGroupId operation middleware
func (siw *ServerInterfaceWrapper) PutGroupsGroupId(c *gin.Context) {

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "groupId", c.Param("groupId"), &groupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter groupId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutGroupsGroupId(c, groupId)
}

// GetRecipients operation middleware
func (siw *ServerInterfaceWrapper) GetRecipients(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetRecipients(c)
}

// PostRecipients operation middleware
func (siw *ServerInterfaceWrapper) PostRecipients(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostRecipients(c)
}

// DeleteRecipientsRecipientId operation middleware
func (siw *ServerInterfaceWrapper) DeleteRecipientsRecipientId(c *gin.Context) {

	var err error

	// ------------- Path parameter "recipientId" -------------
	var recipientId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "recipientId", c.Param("recipientId"), &recipientId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter recipientId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteRecipientsRecipientId(c, recipientId)
}

// GetRecipientsRecipientId operation middleware
func (siw *ServerInterfaceWrapper) GetRecipientsRecipientId(c *gin.Context) {

	var err error

	// ------------- Path parameter "recipientId" -------------
	var recipientId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "recipientId", c.Param("recipientId"), &recipientId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter recipientId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetRecipientsRecipientId(c, recipientId)
}

// PutRecipientsRecipientId operation middleware
func (siw *ServerInterfaceWrapper) PutRecipientsRecipientId(c *gin.Context) {

	var err error

	// ------------- Path parameter "recipientId" -------------
	var recipientId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "recipientId", c.Param("recipientId"), &recipientId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter recipientId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutRecipientsRecipientId(c, recipientId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/beacons", wrapper.GetBeacons)

	router.DELETE(options.BaseURL+"/beacons/:beaconId", wrapper.DeleteBeaconsBeaconId)

	router.GET(options.BaseURL+"/beacons/:beaconId", wrapper.GetBeaconsBeaconId)

	router.GET(options.BaseURL+"/groups", wrapper.GetGroups)

	router.POST(options.BaseURL+"/groups", wrapper.PostGroups)

	router.DELETE(options.BaseURL+"/groups/:groupId", wrapper.DeleteGroupsGroupId)

	router.GET(options.BaseURL+"/groups/:groupId", wrapper.GetGroupsGroupId)

	router.PUT(options.BaseURL+"/groups/:groupId", wrapper.PutGroupsGroupId)

	router.GET(options.BaseURL+"/recipients", wrapper.GetRecipients)

	router.POST(options.BaseURL+"/recipients", wrapper.PostRecipients)

	router.DELETE(options.BaseURL+"/recipients/:recipientId", wrapper.DeleteRecipientsRecipientId)

	router.GET(options.BaseURL+"/recipients/:recipientId", wrapper.GetRecipientsRecipientId)

	router.PUT(options.BaseURL+"/recipients/:recipientId", wrapper.PutRecipientsRecipientId)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xZbW/bNhD+KwS3j3Ikv8Rt/WlOkwYBujRoHQxbUQy0dLZZSCRHUk1cw/99ICnLerMt",
	"b47bbzLFe3vu7rlTssIhTwRnwLTCoxWWoARnCuyPd1xOaRQBu5GSS3MScqaBafNIhIhpSDTlzP+qODNn",
	"KlxAQsyTkFyA1NQpgo18BDOSxhqPtrqxh+GZJCKGyqleCnOktKRsjtceTkApMoeynj95iogExLhGJNUL",
	"Lul3iJDmiIQhKIX0giokQfFUhlAydrRoxaN1fsKnXyHUeG2OIlChpMLgcryNtYfvuX7HUxa9AOb3XCOr",
	"uwRD8bQd5pMFIAn/pKA0RLnz6IkoG+esZqKlwH/At5VmI+ZgsshcAQkddiSOP8zw6PMK/yphhkf4F3/b",
	"Dn4m4k+AEaaviILfeQQxXntVrMcyXFjM84ifXw//Hg6aEHXW76Ly/W6vD4PL4asOvH4z7XR7Ub9DBpfD",
	"zqA3HF5eDgZBEATYwzMuE2JSkKa0MV+3kqfixZR/p6KkWcsU8ntTzmMgzFz88KnswB+URfxJNen8CIJL",
	"PY4iWRZZaC1Gvp8dXIQ88aW92qTkkyaahq1cm0jClNVTM9ek+VE8t1L7KJ7fwzeIS5ff5Dcp0zAH2VTT",
	"XzZZO2VBuiKzj1RDYh/2acxaYusdkZIsze/rYrsVERujufEazbhEGpQ2gDUAeE8SKAtOQGnkIm64/yAp",
	"l1QvSzLdOpCmckIq6GZwtQozF6lH2pyYrcAJk/OWM01CfcdmvIyMgfG3QsU34bMnH3Lj7KGcWPDbo+Zy",
	"1VAb9dzmeKFuk+GJPSgK3CSExm2o32SjCm1t5r2VQDRE40pz94JevxP0O71Xk25/FASjIPiryHcR0dDR",
	"NIFmwGPIdZbNZa/a8Q6tYlX06vI4r9YeNkOPSmP8s9Ode4q/1MDz8N31y4wEl5KX0v4ookP5HByNXMNO",
	"QbNWLO8WN84gGj/c2Y5KCCNzyuZomrGrhzXV1iPHn+Ym9vA3kMpp6F4EF4EJhAtgRFA8wv2L7oWJXRC9",
	"sEXkT7dcPQcbqakxu+SZQY5vQV/lBkv7eS8IjloQ/9coqO9eYxRTpRGf5YDYRStNEiKXeITfm7ckjkuv",
	"N+H6q2m2CK0d8qZ268G7ms7iz1enGg6DevbMZuhM2G3QGYiQSu3ePUvjeFnx19lCZCM2XaK7awPEgbTs",
	"duu49LTJSvMGPN28LYZzCxoRpASEdEbDWlCCSJKABqnsSKNGlylK7GFmeR1Pi3Ft2Mbx29bpUze9JXp/",
	"nk+oXdhnM+wcHbFj/u1riMz/Hf2weethwVVDeA9cFeOzXzdXPFqerJqyiMpzxGR2XcOz+xJG6xUcusnt",
	"oKng5qY6IojBU+FCViT+au6+eVrwiAN1843UlkXcnnssiTipgxxywKXgPPA3wV7hj0o8h+ljXojpfOzh",
	"YZE2tVTagPQPbawzZTZ1K1Rjht16hQhD8Ezt10KxvWTp+2pX/Ra+ws7Bxfu+4PbwcSGWHZxcvLGPlyvx",
	"nr6EChGel58rhndztCxc3MnT5UuFYvJX+XMrzt4C/nEr15q7t9/Eu/nbwwMn3oRObsYv/2F2B+tv7R1k",
	"/paBBedLsCw21yDoH8ak8h+CU0BZGTsNgB4ePbIC6M8wfnan+4dzyBlLbDOOfopSa5h/Rdpar/8NAAD/",
	"/1nCxwYeGwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
