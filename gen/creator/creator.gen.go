// Package creator provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package creator

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// Dist defines model for Dist.
type Dist struct {
	Arch *string `json:"arch,omitempty"`
	Os   *string `json:"os,omitempty"`
}

// Arch defines model for Arch.
type Arch = string

// BeaconId defines model for BeaconId.
type BeaconId = openapi_types.UUID

// GroupId defines model for GroupId.
type GroupId = openapi_types.UUID

// Gzip defines model for Gzip.
type Gzip = bool

// OS defines model for OS.
type OS = string

// ReportAddr defines model for ReportAddr.
type ReportAddr = string

// Static defines model for Static.
type Static = bool

// Transport defines model for Transport.
type Transport = string

// Upx defines model for Upx.
type Upx = bool

// UpxLevel defines model for UpxLevel.
type UpxLevel = int

// ForbiddenError defines model for ForbiddenError.
type ForbiddenError struct {
	Error   *string `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
}

// PostCreatorParams defines parameters for PostCreator.
type PostCreatorParams struct {
	// ReportAddr The URL of the report server.
	ReportAddr ReportAddr `form:"report_addr" json:"report_addr"`

	// Os The operating system of the beacon.
	Os OS `form:"os" json:"os"`

	// Arch The architecture of the beacon.
	Arch Arch `form:"arch" json:"arch"`

	// BeaconId The UUID of the beacon.
	BeaconId *BeaconId `form:"beacon_id,omitempty" json:"beacon_id,omitempty"`

	// GroupId The UUID of the group.
	GroupId *GroupId `form:"group_id,omitempty" json:"group_id,omitempty"`

	// Static Indicates if the beacon is static.
	Static *Static `form:"static,omitempty" json:"static,omitempty"`

	// Upx Indicates if the beacon is compressed using UPX.
	Upx *Upx `form:"upx,omitempty" json:"upx,omitempty"`

	// UpxLevel The compression level used by UPX.
	UpxLevel *UpxLevel `form:"upx_level,omitempty" json:"upx_level,omitempty"`

	// Gzip Indicates if the beacon is compressed using Gzip.
	Gzip *Gzip `form:"gzip,omitempty" json:"gzip,omitempty"`

	// Transport The transport protocol used by the beacon.
	Transport *Transport `form:"transport,omitempty" json:"transport,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new beacon.
	// (POST /creator)
	PostCreator(c *gin.Context, params PostCreatorParams)
	// List all supported OS and Arch combinations
	// (GET /distlist)
	GetDistlist(c *gin.Context)
	// Check the health of the server.
	// (GET /healthz)
	GetHealthz(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostCreator operation middleware
func (siw *ServerInterfaceWrapper) PostCreator(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostCreatorParams

	// ------------- Required query parameter "report_addr" -------------

	if paramValue := c.Query("report_addr"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument report_addr is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "report_addr", c.Request.URL.Query(), &params.ReportAddr)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter report_addr: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "os" -------------

	if paramValue := c.Query("os"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument os is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "os", c.Request.URL.Query(), &params.Os)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter os: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "arch" -------------

	if paramValue := c.Query("arch"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument arch is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "arch", c.Request.URL.Query(), &params.Arch)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter arch: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "beacon_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "beacon_id", c.Request.URL.Query(), &params.BeaconId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter beacon_id: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "group_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "group_id", c.Request.URL.Query(), &params.GroupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter group_id: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "static" -------------

	err = runtime.BindQueryParameter("form", true, false, "static", c.Request.URL.Query(), &params.Static)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter static: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "upx" -------------

	err = runtime.BindQueryParameter("form", true, false, "upx", c.Request.URL.Query(), &params.Upx)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter upx: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "upx_level" -------------

	err = runtime.BindQueryParameter("form", true, false, "upx_level", c.Request.URL.Query(), &params.UpxLevel)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter upx_level: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gzip" -------------

	err = runtime.BindQueryParameter("form", true, false, "gzip", c.Request.URL.Query(), &params.Gzip)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gzip: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "transport" -------------

	err = runtime.BindQueryParameter("form", true, false, "transport", c.Request.URL.Query(), &params.Transport)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter transport: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostCreator(c, params)
}

// GetDistlist operation middleware
func (siw *ServerInterfaceWrapper) GetDistlist(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetDistlist(c)
}

// GetHealthz operation middleware
func (siw *ServerInterfaceWrapper) GetHealthz(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetHealthz(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/creator", wrapper.PostCreator)

	router.GET(options.BaseURL+"/distlist", wrapper.GetDistlist)

	router.GET(options.BaseURL+"/healthz", wrapper.GetHealthz)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xWb2/bthP+KgR/v5dK5CSO1/pdunRdgAAJmgbbMAQBLZ4tdhLJkqc0TqDvPhwp2ZYt",
	"p8qC7ZVh6uHdw+f+PvPMlNZo0Oj59Jlb4UQJCC78O3NZTr8SfOaURWU0n/IvOTDhslwhZFg5YGbOMAc2",
	"A5EZfcgTrgj2rQK35AnXogQ+5XSDJ9zBt0o5kHyKroKE+yyHUpATeBSlLQj6+G5yPxnzhOPS0n+PTukF",
	"r+uEfwg+LmQ/q9vbi/NhbOLXeyV5P4Wj4xMYn05+OoB372cHR8fy5ECMTycH4+PJ5PR0PB6NRiOe8Llx",
	"pUA+5VUVTO0S/uRMZYfwXRBwH93w8b9g+6TsLtULLVUmEDxTm9oy5RlljwPvQbLKK71gZGHvK8j65gsk",
	"zEVVYJsLqwfFvw29mTEFCB34Xd30C2ksOIHk3y89QjksCYwfmJC/KS3Nd98r2WewxuGZlG5PjD9ftmxc",
	"gDIP7gHcPlIRdC/I4DB2OaKdpmlzcJiZMo1GevneoECVvSrIPlzZRzh+7Y/rXBR+UGC/OKF94NwrIraf",
	"mXUGTWYKVlHOzZYDwry63M+RS02R7erZK92tfXxbcdxe/76PZGUf3yjhrX28hAco+hVsuSijWUGwlYAv",
	"k7oP4H5qRxu03q84KY2wAMdrIuXAW6M9hHHyi3EzJSXoj86ZUC6Z0Qg6BF1YW5CQyuj0qyfezxs+raMS",
	"RxUNQXt/HcSV7U4oN0+34pnwErwXC+ja+cNUTDhg2iATFebGqSeQDA0TWQbeM8yVZw68qVwGHWevvrqb",
	"Yc2JmX2FDKOC3VC+0gcZiCIG3c6Vx101RTPlfzyAE2qZgztjz2OUnpvd/PwYzbGz6ws2N46VQosF1Uss",
	"pWBdYfAX5z8hecIfwPlo4ehwdDgK/CxoYRWf8pNwlHArMA+k08yBwJg31kQhmrkRNwp+bTz+3ICSzir0",
	"5zP/v4M5n/L/peuFKV1D0o0xUCc/RF/dDEGF9WsAbrUUDcC2+8gAaDMpBiCpMQ6DxQ41hCftCgNw68FR",
	"38VxCR4/GLl8ob2YDAEPPDoQZbfNrDakmdIidMLttK63Z/J2kzsejf491926Ee2sCZkNks2dKcMM8tWs",
	"VEhHjbU64ePRCfnp03P1gHSrRYf+UZUlmZjyUBvABNPwfWPmolhQifC2vu7oViqVx6LpNwvoqbZPgOct",
	"5lUa7k4HhVD6fY9r+l8amt+6LQnnxLJP1TNGlGhn85WlzALJrm6Y0JJRQdIkJVEJ7bcEuqSLoiiG3Fzr",
	"tlIqCpeDKDB/ekm3XxvIG2XrjgHa4yrfnYbR0bIz5tZn/2B+0SoS919akPLGVJ3w08j9JTTNvNWNbmLm",
	"kP0VEj9+bxfu9abdat2Ke1fXdf13AAAA//+L1nQK/Q4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
