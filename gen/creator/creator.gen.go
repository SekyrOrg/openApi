// Package creator provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package creator

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// Arch defines model for Arch.
type Arch = string

// BeaconId defines model for BeaconId.
type BeaconId = openapi_types.UUID

// GroupId defines model for GroupId.
type GroupId = openapi_types.UUID

// Gzip defines model for Gzip.
type Gzip = bool

// OS defines model for OS.
type OS = string

// ReportAddr defines model for ReportAddr.
type ReportAddr = string

// Static defines model for Static.
type Static = bool

// Transport defines model for Transport.
type Transport = string

// Upx defines model for Upx.
type Upx = bool

// UpxLevel defines model for UpxLevel.
type UpxLevel = int

// ForbiddenError defines model for ForbiddenError.
type ForbiddenError struct {
	Error   *string `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
}

// PostCreatorParams defines parameters for PostCreator.
type PostCreatorParams struct {
	// ReportAddr The URL of the report server.
	ReportAddr ReportAddr `form:"ReportAddr" json:"ReportAddr"`

	// OS The operating system of the beacon.
	OS OS `form:"OS" json:"OS"`

	// Arch The architecture of the beacon.
	Arch Arch `form:"Arch" json:"Arch"`

	// BeaconId The UUID of the beacon.
	BeaconId *BeaconId `form:"BeaconId,omitempty" json:"BeaconId,omitempty"`

	// GroupId The UUID of the group.
	GroupId *GroupId `form:"GroupId,omitempty" json:"GroupId,omitempty"`

	// Static Indicates if the beacon is static.
	Static *Static `form:"Static,omitempty" json:"Static,omitempty"`

	// Upx Indicates if the beacon is compressed using UPX.
	Upx *Upx `form:"Upx,omitempty" json:"Upx,omitempty"`

	// UpxLevel The compression level used by UPX.
	UpxLevel *UpxLevel `form:"UpxLevel,omitempty" json:"UpxLevel,omitempty"`

	// Gzip Indicates if the beacon is compressed using Gzip.
	Gzip *Gzip `form:"Gzip,omitempty" json:"Gzip,omitempty"`

	// Transport The transport protocol used by the beacon.
	Transport *Transport `form:"Transport,omitempty" json:"Transport,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new beacon.
	// (POST /creator)
	PostCreator(c *gin.Context, params PostCreatorParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostCreator operation middleware
func (siw *ServerInterfaceWrapper) PostCreator(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostCreatorParams

	// ------------- Required query parameter "ReportAddr" -------------

	if paramValue := c.Query("ReportAddr"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument ReportAddr is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "ReportAddr", c.Request.URL.Query(), &params.ReportAddr)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ReportAddr: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "OS" -------------

	if paramValue := c.Query("OS"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument OS is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "OS", c.Request.URL.Query(), &params.OS)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter OS: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "Arch" -------------

	if paramValue := c.Query("Arch"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument Arch is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "Arch", c.Request.URL.Query(), &params.Arch)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Arch: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "BeaconId" -------------

	err = runtime.BindQueryParameter("form", true, false, "BeaconId", c.Request.URL.Query(), &params.BeaconId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter BeaconId: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "GroupId" -------------

	err = runtime.BindQueryParameter("form", true, false, "GroupId", c.Request.URL.Query(), &params.GroupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter GroupId: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "Static" -------------

	err = runtime.BindQueryParameter("form", true, false, "Static", c.Request.URL.Query(), &params.Static)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Static: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "Upx" -------------

	err = runtime.BindQueryParameter("form", true, false, "Upx", c.Request.URL.Query(), &params.Upx)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Upx: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "UpxLevel" -------------

	err = runtime.BindQueryParameter("form", true, false, "UpxLevel", c.Request.URL.Query(), &params.UpxLevel)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter UpxLevel: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "Gzip" -------------

	err = runtime.BindQueryParameter("form", true, false, "Gzip", c.Request.URL.Query(), &params.Gzip)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Gzip: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "Transport" -------------

	err = runtime.BindQueryParameter("form", true, false, "Transport", c.Request.URL.Query(), &params.Transport)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Transport: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostCreator(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/creator", wrapper.PostCreator)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RW72/bNhD9VwhuH2VbThyv1bd064YABRI0NbZhKAaaOlssJB57PKVxA/3vAynLvyJ3",
	"Cop+MiQ/vXu8dz/4JDVWDi1Y9jJ7kk6RqoCB4tM16SL85uA1GccGrczkhwKEIl0YBs01gcCV4ALEEpRG",
	"O5aJNAH2uQbayERaVYHMWq5EEnyuDUEuM6YaEul1AZUKQeBRVa4M0MdX83/nM5lI3rjw7JmMXcumSeSb",
	"GOMm71e1WNz8NkzNjqdfwfTiEmZX819G8Or1cjS9yC9HanY1H80u5vOrq9ksTdNUJnKFVCmWmaxrk/fq",
	"/YOwdkPkrgPwnNqO5UeL/Wrcc6U3NjdaMXhhDjMrjBehdgi8h1zU3ti1CAxnDxHYD0+Qw0rVJXeVsDtQ",
	"+7iVt0QsQdmo7/a+P4/ogBSH+H7jGaphJXB7P7Ac/zQ2xy++N2XvwSHxdZ7TGYvfv+vUUIQKD/QAdE7U",
	"Ad8wcQWzyyaT7YuxxmrSBuqVe8+KjX6Rxz5+ck7vlrDX1pUq/SBfP5CyPmruzSF3fwtHyKixFHUoueVm",
	"gMt77l6NMrfB2ON89qZu4R6/rzcWd3+dExm4vy+FC/f4Dh6g7M9gp8WgFWWA7RL4bVEtZa+y6YGq1ztJ",
	"xjKsgWQTNBF4h9ZDXCW/Iy1NnoN9S4SxWTRaBhs9V86VIY8G7eSTD7KfDmI6Cg3OpiWC7vu9hzvuIycP",
	"357YmcgKvFdrOOb5G2uhCIRFFqrmAsl8hVwwCqU1eC+4MF4QeKxJw1GwF3/6vMC2b3D5CTS3GTx28oUx",
	"IoOxK3xeE29b3eL67kaskESlrFqHGm3LN446w+V+UQakTOQDkG8ZpuN0nIZEogOrnJGZvBxPx2HPOMVF",
	"dGqiCRS3Zjn00entqG5XuLxDz79uQcnR3eOfJ/kzwUpm8qfJ/oYy2UMmB5OySf4XfXs/BBXvKANwu9vD",
	"AGy3uwdAt8N0ADIMjGGwtoWH6AzreQBuP1Cbj+2KAs9vMN98o6dRM/DIM4Gqjnt7dylZGqvi9DltjOZ0",
	"D55Olos0/XGhj/tGdfM9VjbkYkVYxbnv62VlOLzasjWJnKWXIU5fPncHmJzMxRDT11UVKDIZewOEEha+",
	"HOw5VuvQIrLrr49N0zT/BQAA//8hkvdkygsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
