// Package gateway provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package gateway

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
