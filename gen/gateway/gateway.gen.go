// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// Beacon defines model for Beacon.
type Beacon struct {
	Arch      *string             `json:"Arch,omitempty"`
	BeaconId  *openapi_types.UUID `json:"BeaconId,omitempty"`
	CreatedAt *time.Time          `json:"CreatedAt,omitempty"`
	DeletedAt *struct {
		Deleted bool      `json:"Deleted"`
		Time    time.Time `json:"Time"`
	} `json:"DeletedAt,omitempty"`
	GroupId    *openapi_types.UUID `json:"GroupId,omitempty"`
	Gzip       *bool               `json:"Gzip,omitempty"`
	ID         *openapi_types.UUID `json:"ID,omitempty"`
	OS         *string             `json:"OS,omitempty"`
	ReportAddr *string             `json:"ReportAddr,omitempty"`
	Static     *bool               `json:"Static,omitempty"`
	TenantID   *openapi_types.UUID `json:"TenantID,omitempty"`
	Transport  *string             `json:"Transport,omitempty"`
	UpdatedAt  *time.Time          `json:"UpdatedAt,omitempty"`
	Upx        *bool               `json:"Upx,omitempty"`
	UpxLevel   *int                `json:"UpxLevel,omitempty"`
}

// Dist defines model for Dist.
type Dist struct {
	Arch *string `json:"arch,omitempty"`
	Os   *string `json:"os,omitempty"`
}

// Group defines model for Group.
type Group struct {
	Beacons   *[]Beacon  `json:"Beacons,omitempty"`
	CreatedAt *time.Time `json:"CreatedAt,omitempty"`
	DeletedAt *struct {
		Deleted bool      `json:"Deleted"`
		Time    time.Time `json:"Time"`
	} `json:"DeletedAt,omitempty"`
	Description *string             `json:"Description,omitempty"`
	ID          *openapi_types.UUID `json:"ID,omitempty"`
	Name        *string             `json:"Name,omitempty"`
	Priority    *int                `json:"Priority,omitempty"`
	Recipients  *[]Recipient        `json:"Recipients,omitempty"`
	TenantID    *openapi_types.UUID `json:"TenantID,omitempty"`
	UpdatedAt   *time.Time          `json:"UpdatedAt,omitempty"`
}

// Recipient defines model for Recipient.
type Recipient struct {
	ContactInfo *string    `json:"ContactInfo,omitempty"`
	CreatedAt   *time.Time `json:"CreatedAt,omitempty"`
	DeletedAt   *struct {
		Deleted bool      `json:"Deleted"`
		Time    time.Time `json:"Time"`
	} `json:"DeletedAt,omitempty"`
	Description *string             `json:"Description,omitempty"`
	Groups      *[]Group            `json:"Groups,omitempty"`
	ID          *openapi_types.UUID `json:"ID,omitempty"`
	Name        *string             `json:"Name,omitempty"`
	TenantID    *openapi_types.UUID `json:"TenantID,omitempty"`
	Type        *string             `json:"Type,omitempty"`
	UpdatedAt   *time.Time          `json:"UpdatedAt,omitempty"`
}

// TenantBaseModel defines model for TenantBaseModel.
type TenantBaseModel struct {
	CreatedAt *time.Time `json:"CreatedAt,omitempty"`
	DeletedAt *struct {
		Deleted bool      `json:"Deleted"`
		Time    time.Time `json:"Time"`
	} `json:"DeletedAt,omitempty"`
	ID        *openapi_types.UUID `json:"ID,omitempty"`
	TenantID  *openapi_types.UUID `json:"TenantID,omitempty"`
	UpdatedAt *time.Time          `json:"UpdatedAt,omitempty"`
}

// Arch defines model for Arch.
type Arch = string

// BeaconId defines model for BeaconId.
type BeaconId = openapi_types.UUID

// GroupId defines model for GroupId.
type GroupId = openapi_types.UUID

// Gzip defines model for Gzip.
type Gzip = bool

// OS defines model for OS.
type OS = string

// ReportAddr defines model for ReportAddr.
type ReportAddr = string

// Static defines model for Static.
type Static = bool

// Transport defines model for Transport.
type Transport = string

// Upx defines model for Upx.
type Upx = bool

// UpxLevel defines model for UpxLevel.
type UpxLevel = int

// ForbiddenError defines model for ForbiddenError.
type ForbiddenError struct {
	Error   *string `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
}

// NotFoundError defines model for NotFoundError.
type NotFoundError struct {
	Error   *string `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
}

// PostCreatorParams defines parameters for PostCreator.
type PostCreatorParams struct {
	// ReportAddr The URL of the report server.
	ReportAddr ReportAddr `form:"report_addr" json:"report_addr"`

	// Os The operating system of the beacon.
	Os OS `form:"os" json:"os"`

	// Arch The architecture of the beacon.
	Arch Arch `form:"arch" json:"arch"`

	// BeaconId The UUID of the beacon.
	BeaconId *BeaconId `form:"beacon_id,omitempty" json:"beacon_id,omitempty"`

	// GroupId The UUID of the group.
	GroupId *GroupId `form:"group_id,omitempty" json:"group_id,omitempty"`

	// Static Indicates if the beacon is static.
	Static *Static `form:"static,omitempty" json:"static,omitempty"`

	// Upx Indicates if the beacon is compressed using UPX.
	Upx *Upx `form:"upx,omitempty" json:"upx,omitempty"`

	// UpxLevel The compression level used by UPX.
	UpxLevel *UpxLevel `form:"upx_level,omitempty" json:"upx_level,omitempty"`

	// Gzip Indicates if the beacon is compressed using Gzip.
	Gzip *Gzip `form:"gzip,omitempty" json:"gzip,omitempty"`

	// Transport The transport protocol used by the beacon.
	Transport *Transport `form:"transport,omitempty" json:"transport,omitempty"`
}

// PostGroupsJSONRequestBody defines body for PostGroups for application/json ContentType.
type PostGroupsJSONRequestBody = Group

// PutGroupsGroupIdJSONRequestBody defines body for PutGroupsGroupId for application/json ContentType.
type PutGroupsGroupIdJSONRequestBody = Group

// PostRecipientsJSONRequestBody defines body for PostRecipients for application/json ContentType.
type PostRecipientsJSONRequestBody = Recipient

// PutRecipientsRecipientIdJSONRequestBody defines body for PutRecipientsRecipientId for application/json ContentType.
type PutRecipientsRecipientIdJSONRequestBody = Recipient

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all beacons
	// (GET /beacons)
	GetBeacons(c *gin.Context)
	// Delete a beacon by ID
	// (DELETE /beacons/{beaconId})
	DeleteBeaconsBeaconId(c *gin.Context, beaconId openapi_types.UUID)
	// Get a specific beacon by ID
	// (GET /beacons/{beaconId})
	GetBeaconsBeaconId(c *gin.Context, beaconId openapi_types.UUID)
	// Create a new beacon.
	// (POST /creator)
	PostCreator(c *gin.Context, params PostCreatorParams)
	// List all supported OS and Arch combinations
	// (GET /distlist)
	GetDistlist(c *gin.Context)
	// List all groups
	// (GET /groups)
	GetGroups(c *gin.Context)
	// Create a new group
	// (POST /groups)
	PostGroups(c *gin.Context)
	// Delete a group by ID
	// (DELETE /groups/{groupId})
	DeleteGroupsGroupId(c *gin.Context, groupId openapi_types.UUID)
	// Get a specific group by ID
	// (GET /groups/{groupId})
	GetGroupsGroupId(c *gin.Context, groupId openapi_types.UUID)
	// Update an existing group
	// (PUT /groups/{groupId})
	PutGroupsGroupId(c *gin.Context, groupId openapi_types.UUID)
	// List all recipients
	// (GET /recipients)
	GetRecipients(c *gin.Context)
	// Create a new recipient
	// (POST /recipients)
	PostRecipients(c *gin.Context)
	// Delete a recipient by ID
	// (DELETE /recipients/{recipientId})
	DeleteRecipientsRecipientId(c *gin.Context, recipientId openapi_types.UUID)
	// Get a specific recipient by ID
	// (GET /recipients/{recipientId})
	GetRecipientsRecipientId(c *gin.Context, recipientId openapi_types.UUID)
	// Update an existing recipient
	// (PUT /recipients/{recipientId})
	PutRecipientsRecipientId(c *gin.Context, recipientId openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetBeacons operation middleware
func (siw *ServerInterfaceWrapper) GetBeacons(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetBeacons(c)
}

// DeleteBeaconsBeaconId operation middleware
func (siw *ServerInterfaceWrapper) DeleteBeaconsBeaconId(c *gin.Context) {

	var err error

	// ------------- Path parameter "beaconId" -------------
	var beaconId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "beaconId", c.Param("beaconId"), &beaconId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter beaconId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteBeaconsBeaconId(c, beaconId)
}

// GetBeaconsBeaconId operation middleware
func (siw *ServerInterfaceWrapper) GetBeaconsBeaconId(c *gin.Context) {

	var err error

	// ------------- Path parameter "beaconId" -------------
	var beaconId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "beaconId", c.Param("beaconId"), &beaconId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter beaconId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetBeaconsBeaconId(c, beaconId)
}

// PostCreator operation middleware
func (siw *ServerInterfaceWrapper) PostCreator(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostCreatorParams

	// ------------- Required query parameter "report_addr" -------------

	if paramValue := c.Query("report_addr"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument report_addr is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "report_addr", c.Request.URL.Query(), &params.ReportAddr)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter report_addr: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "os" -------------

	if paramValue := c.Query("os"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument os is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "os", c.Request.URL.Query(), &params.Os)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter os: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "arch" -------------

	if paramValue := c.Query("arch"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument arch is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "arch", c.Request.URL.Query(), &params.Arch)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter arch: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "beacon_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "beacon_id", c.Request.URL.Query(), &params.BeaconId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter beacon_id: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "group_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "group_id", c.Request.URL.Query(), &params.GroupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter group_id: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "static" -------------

	err = runtime.BindQueryParameter("form", true, false, "static", c.Request.URL.Query(), &params.Static)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter static: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "upx" -------------

	err = runtime.BindQueryParameter("form", true, false, "upx", c.Request.URL.Query(), &params.Upx)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter upx: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "upx_level" -------------

	err = runtime.BindQueryParameter("form", true, false, "upx_level", c.Request.URL.Query(), &params.UpxLevel)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter upx_level: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gzip" -------------

	err = runtime.BindQueryParameter("form", true, false, "gzip", c.Request.URL.Query(), &params.Gzip)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gzip: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "transport" -------------

	err = runtime.BindQueryParameter("form", true, false, "transport", c.Request.URL.Query(), &params.Transport)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter transport: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostCreator(c, params)
}

// GetDistlist operation middleware
func (siw *ServerInterfaceWrapper) GetDistlist(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetDistlist(c)
}

// GetGroups operation middleware
func (siw *ServerInterfaceWrapper) GetGroups(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetGroups(c)
}

// PostGroups operation middleware
func (siw *ServerInterfaceWrapper) PostGroups(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostGroups(c)
}

// DeleteGroupsGroupId operation middleware
func (siw *ServerInterfaceWrapper) DeleteGroupsGroupId(c *gin.Context) {

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "groupId", c.Param("groupId"), &groupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter groupId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteGroupsGroupId(c, groupId)
}

// GetGroupsGroupId operation middleware
func (siw *ServerInterfaceWrapper) GetGroupsGroupId(c *gin.Context) {

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "groupId", c.Param("groupId"), &groupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter groupId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetGroupsGroupId(c, groupId)
}

// PutGroupsGroupId operation middleware
func (siw *ServerInterfaceWrapper) PutGroupsGroupId(c *gin.Context) {

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "groupId", c.Param("groupId"), &groupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter groupId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutGroupsGroupId(c, groupId)
}

// GetRecipients operation middleware
func (siw *ServerInterfaceWrapper) GetRecipients(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetRecipients(c)
}

// PostRecipients operation middleware
func (siw *ServerInterfaceWrapper) PostRecipients(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostRecipients(c)
}

// DeleteRecipientsRecipientId operation middleware
func (siw *ServerInterfaceWrapper) DeleteRecipientsRecipientId(c *gin.Context) {

	var err error

	// ------------- Path parameter "recipientId" -------------
	var recipientId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "recipientId", c.Param("recipientId"), &recipientId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter recipientId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteRecipientsRecipientId(c, recipientId)
}

// GetRecipientsRecipientId operation middleware
func (siw *ServerInterfaceWrapper) GetRecipientsRecipientId(c *gin.Context) {

	var err error

	// ------------- Path parameter "recipientId" -------------
	var recipientId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "recipientId", c.Param("recipientId"), &recipientId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter recipientId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetRecipientsRecipientId(c, recipientId)
}

// PutRecipientsRecipientId operation middleware
func (siw *ServerInterfaceWrapper) PutRecipientsRecipientId(c *gin.Context) {

	var err error

	// ------------- Path parameter "recipientId" -------------
	var recipientId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "recipientId", c.Param("recipientId"), &recipientId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter recipientId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutRecipientsRecipientId(c, recipientId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/beacons", wrapper.GetBeacons)

	router.DELETE(options.BaseURL+"/beacons/:beaconId", wrapper.DeleteBeaconsBeaconId)

	router.GET(options.BaseURL+"/beacons/:beaconId", wrapper.GetBeaconsBeaconId)

	router.POST(options.BaseURL+"/creator", wrapper.PostCreator)

	router.GET(options.BaseURL+"/distlist", wrapper.GetDistlist)

	router.GET(options.BaseURL+"/groups", wrapper.GetGroups)

	router.POST(options.BaseURL+"/groups", wrapper.PostGroups)

	router.DELETE(options.BaseURL+"/groups/:groupId", wrapper.DeleteGroupsGroupId)

	router.GET(options.BaseURL+"/groups/:groupId", wrapper.GetGroupsGroupId)

	router.PUT(options.BaseURL+"/groups/:groupId", wrapper.PutGroupsGroupId)

	router.GET(options.BaseURL+"/recipients", wrapper.GetRecipients)

	router.POST(options.BaseURL+"/recipients", wrapper.PostRecipients)

	router.DELETE(options.BaseURL+"/recipients/:recipientId", wrapper.DeleteRecipientsRecipientId)

	router.GET(options.BaseURL+"/recipients/:recipientId", wrapper.GetRecipientsRecipientId)

	router.PUT(options.BaseURL+"/recipients/:recipientId", wrapper.PutRecipientsRecipientId)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ymVrvf4vAAD//xJ4VruZJgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
