// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// Beacon defines model for Beacon.
type Beacon struct {
	Arch      *string             `json:"Arch,omitempty"`
	BeaconId  *openapi_types.UUID `json:"BeaconId,omitempty"`
	CreatedAt *time.Time          `json:"CreatedAt,omitempty"`
	DeletedAt *struct {
		Deleted bool      `json:"Deleted"`
		Time    time.Time `json:"Time"`
	} `json:"DeletedAt,omitempty"`
	GroupId    *openapi_types.UUID `json:"GroupId,omitempty"`
	Gzip       *bool               `json:"Gzip,omitempty"`
	ID         *openapi_types.UUID `json:"ID,omitempty"`
	OS         *string             `json:"OS,omitempty"`
	ReportAddr *string             `json:"ReportAddr,omitempty"`
	Static     *bool               `json:"Static,omitempty"`
	TenantID   *openapi_types.UUID `json:"TenantID,omitempty"`
	Transport  *string             `json:"Transport,omitempty"`
	UpdatedAt  *time.Time          `json:"UpdatedAt,omitempty"`
	Upx        *bool               `json:"Upx,omitempty"`
	UpxLevel   *int                `json:"UpxLevel,omitempty"`
}

// Group defines model for Group.
type Group struct {
	Beacons   *[]Beacon  `json:"Beacons,omitempty"`
	CreatedAt *time.Time `json:"CreatedAt,omitempty"`
	DeletedAt *struct {
		Deleted bool      `json:"Deleted"`
		Time    time.Time `json:"Time"`
	} `json:"DeletedAt,omitempty"`
	Description *string             `json:"Description,omitempty"`
	ID          *openapi_types.UUID `json:"ID,omitempty"`
	Name        *string             `json:"Name,omitempty"`
	Priority    *int                `json:"Priority,omitempty"`
	Recipients  *[]Recipient        `json:"Recipients,omitempty"`
	TenantID    *openapi_types.UUID `json:"TenantID,omitempty"`
	UpdatedAt   *time.Time          `json:"UpdatedAt,omitempty"`
}

// Recipient defines model for Recipient.
type Recipient struct {
	ContactInfo *string    `json:"ContactInfo,omitempty"`
	CreatedAt   *time.Time `json:"CreatedAt,omitempty"`
	DeletedAt   *struct {
		Deleted bool      `json:"Deleted"`
		Time    time.Time `json:"Time"`
	} `json:"DeletedAt,omitempty"`
	Description *string             `json:"Description,omitempty"`
	Groups      *[]Group            `json:"Groups,omitempty"`
	ID          *openapi_types.UUID `json:"ID,omitempty"`
	Name        *string             `json:"Name,omitempty"`
	TenantID    *openapi_types.UUID `json:"TenantID,omitempty"`
	Type        *string             `json:"Type,omitempty"`
	UpdatedAt   *time.Time          `json:"UpdatedAt,omitempty"`
}

// TenantBaseModel defines model for TenantBaseModel.
type TenantBaseModel struct {
	CreatedAt *time.Time `json:"CreatedAt,omitempty"`
	DeletedAt *struct {
		Deleted bool      `json:"Deleted"`
		Time    time.Time `json:"Time"`
	} `json:"DeletedAt,omitempty"`
	ID        *openapi_types.UUID `json:"ID,omitempty"`
	TenantID  *openapi_types.UUID `json:"TenantID,omitempty"`
	UpdatedAt *time.Time          `json:"UpdatedAt,omitempty"`
}

// Arch defines model for Arch.
type Arch = string

// BeaconId defines model for BeaconId.
type BeaconId = openapi_types.UUID

// GroupId defines model for GroupId.
type GroupId = openapi_types.UUID

// Gzip defines model for Gzip.
type Gzip = bool

// OS defines model for OS.
type OS = string

// ReportAddr defines model for ReportAddr.
type ReportAddr = string

// Static defines model for Static.
type Static = bool

// Transport defines model for Transport.
type Transport = string

// Upx defines model for Upx.
type Upx = bool

// UpxLevel defines model for UpxLevel.
type UpxLevel = int

// ForbiddenError defines model for ForbiddenError.
type ForbiddenError struct {
	Error   *string `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
}

// NotFoundError defines model for NotFoundError.
type NotFoundError struct {
	Error   *string `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
}

// PostCreatorParams defines parameters for PostCreator.
type PostCreatorParams struct {
	// ReportAddr The URL of the report server.
	ReportAddr ReportAddr `form:"ReportAddr" json:"ReportAddr"`

	// OS The operating system of the beacon.
	OS OS `form:"OS" json:"OS"`

	// Arch The architecture of the beacon.
	Arch Arch `form:"Arch" json:"Arch"`

	// BeaconId The UUID of the beacon.
	BeaconId *BeaconId `form:"BeaconId,omitempty" json:"BeaconId,omitempty"`

	// GroupId The UUID of the group.
	GroupId *GroupId `form:"GroupId,omitempty" json:"GroupId,omitempty"`

	// Static Indicates if the beacon is static.
	Static *Static `form:"Static,omitempty" json:"Static,omitempty"`

	// Upx Indicates if the beacon is compressed using UPX.
	Upx *Upx `form:"Upx,omitempty" json:"Upx,omitempty"`

	// UpxLevel The compression level used by UPX.
	UpxLevel *UpxLevel `form:"UpxLevel,omitempty" json:"UpxLevel,omitempty"`

	// Gzip Indicates if the beacon is compressed using Gzip.
	Gzip *Gzip `form:"Gzip,omitempty" json:"Gzip,omitempty"`

	// Transport The transport protocol used by the beacon.
	Transport *Transport `form:"Transport,omitempty" json:"Transport,omitempty"`
}

// PostGroupsJSONRequestBody defines body for PostGroups for application/json ContentType.
type PostGroupsJSONRequestBody = Group

// PutGroupsGroupIdJSONRequestBody defines body for PutGroupsGroupId for application/json ContentType.
type PutGroupsGroupIdJSONRequestBody = Group

// PostRecipientsJSONRequestBody defines body for PostRecipients for application/json ContentType.
type PostRecipientsJSONRequestBody = Recipient

// PutRecipientsRecipientIdJSONRequestBody defines body for PutRecipientsRecipientId for application/json ContentType.
type PutRecipientsRecipientIdJSONRequestBody = Recipient

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all beacons
	// (GET /beacons)
	GetBeacons(c *gin.Context)
	// Delete a beacon by ID
	// (DELETE /beacons/{beaconId})
	DeleteBeaconsBeaconId(c *gin.Context, beaconId openapi_types.UUID)
	// Get a specific beacon by ID
	// (GET /beacons/{beaconId})
	GetBeaconsBeaconId(c *gin.Context, beaconId openapi_types.UUID)
	// Create a new beacon.
	// (POST /creator)
	PostCreator(c *gin.Context, params PostCreatorParams)
	// List all groups
	// (GET /groups)
	GetGroups(c *gin.Context)
	// Create a new group
	// (POST /groups)
	PostGroups(c *gin.Context)
	// Delete a group by ID
	// (DELETE /groups/{groupId})
	DeleteGroupsGroupId(c *gin.Context, groupId openapi_types.UUID)
	// Get a specific group by ID
	// (GET /groups/{groupId})
	GetGroupsGroupId(c *gin.Context, groupId openapi_types.UUID)
	// Update an existing group
	// (PUT /groups/{groupId})
	PutGroupsGroupId(c *gin.Context, groupId openapi_types.UUID)
	// List all recipients
	// (GET /recipients)
	GetRecipients(c *gin.Context)
	// Create a new recipient
	// (POST /recipients)
	PostRecipients(c *gin.Context)
	// Delete a recipient by ID
	// (DELETE /recipients/{recipientId})
	DeleteRecipientsRecipientId(c *gin.Context, recipientId openapi_types.UUID)
	// Get a specific recipient by ID
	// (GET /recipients/{recipientId})
	GetRecipientsRecipientId(c *gin.Context, recipientId openapi_types.UUID)
	// Update an existing recipient
	// (PUT /recipients/{recipientId})
	PutRecipientsRecipientId(c *gin.Context, recipientId openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetBeacons operation middleware
func (siw *ServerInterfaceWrapper) GetBeacons(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetBeacons(c)
}

// DeleteBeaconsBeaconId operation middleware
func (siw *ServerInterfaceWrapper) DeleteBeaconsBeaconId(c *gin.Context) {

	var err error

	// ------------- Path parameter "beaconId" -------------
	var beaconId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "beaconId", c.Param("beaconId"), &beaconId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter beaconId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteBeaconsBeaconId(c, beaconId)
}

// GetBeaconsBeaconId operation middleware
func (siw *ServerInterfaceWrapper) GetBeaconsBeaconId(c *gin.Context) {

	var err error

	// ------------- Path parameter "beaconId" -------------
	var beaconId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "beaconId", c.Param("beaconId"), &beaconId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter beaconId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetBeaconsBeaconId(c, beaconId)
}

// PostCreator operation middleware
func (siw *ServerInterfaceWrapper) PostCreator(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostCreatorParams

	// ------------- Required query parameter "ReportAddr" -------------

	if paramValue := c.Query("ReportAddr"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument ReportAddr is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "ReportAddr", c.Request.URL.Query(), &params.ReportAddr)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ReportAddr: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "OS" -------------

	if paramValue := c.Query("OS"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument OS is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "OS", c.Request.URL.Query(), &params.OS)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter OS: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "Arch" -------------

	if paramValue := c.Query("Arch"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument Arch is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "Arch", c.Request.URL.Query(), &params.Arch)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Arch: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "BeaconId" -------------

	err = runtime.BindQueryParameter("form", true, false, "BeaconId", c.Request.URL.Query(), &params.BeaconId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter BeaconId: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "GroupId" -------------

	err = runtime.BindQueryParameter("form", true, false, "GroupId", c.Request.URL.Query(), &params.GroupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter GroupId: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "Static" -------------

	err = runtime.BindQueryParameter("form", true, false, "Static", c.Request.URL.Query(), &params.Static)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Static: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "Upx" -------------

	err = runtime.BindQueryParameter("form", true, false, "Upx", c.Request.URL.Query(), &params.Upx)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Upx: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "UpxLevel" -------------

	err = runtime.BindQueryParameter("form", true, false, "UpxLevel", c.Request.URL.Query(), &params.UpxLevel)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter UpxLevel: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "Gzip" -------------

	err = runtime.BindQueryParameter("form", true, false, "Gzip", c.Request.URL.Query(), &params.Gzip)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Gzip: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "Transport" -------------

	err = runtime.BindQueryParameter("form", true, false, "Transport", c.Request.URL.Query(), &params.Transport)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Transport: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostCreator(c, params)
}

// GetGroups operation middleware
func (siw *ServerInterfaceWrapper) GetGroups(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetGroups(c)
}

// PostGroups operation middleware
func (siw *ServerInterfaceWrapper) PostGroups(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostGroups(c)
}

// DeleteGroupsGroupId operation middleware
func (siw *ServerInterfaceWrapper) DeleteGroupsGroupId(c *gin.Context) {

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "groupId", c.Param("groupId"), &groupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter groupId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteGroupsGroupId(c, groupId)
}

// GetGroupsGroupId operation middleware
func (siw *ServerInterfaceWrapper) GetGroupsGroupId(c *gin.Context) {

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "groupId", c.Param("groupId"), &groupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter groupId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetGroupsGroupId(c, groupId)
}

// PutGroupsGroupId operation middleware
func (siw *ServerInterfaceWrapper) PutGroupsGroupId(c *gin.Context) {

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "groupId", c.Param("groupId"), &groupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter groupId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutGroupsGroupId(c, groupId)
}

// GetRecipients operation middleware
func (siw *ServerInterfaceWrapper) GetRecipients(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetRecipients(c)
}

// PostRecipients operation middleware
func (siw *ServerInterfaceWrapper) PostRecipients(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostRecipients(c)
}

// DeleteRecipientsRecipientId operation middleware
func (siw *ServerInterfaceWrapper) DeleteRecipientsRecipientId(c *gin.Context) {

	var err error

	// ------------- Path parameter "recipientId" -------------
	var recipientId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "recipientId", c.Param("recipientId"), &recipientId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter recipientId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteRecipientsRecipientId(c, recipientId)
}

// GetRecipientsRecipientId operation middleware
func (siw *ServerInterfaceWrapper) GetRecipientsRecipientId(c *gin.Context) {

	var err error

	// ------------- Path parameter "recipientId" -------------
	var recipientId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "recipientId", c.Param("recipientId"), &recipientId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter recipientId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetRecipientsRecipientId(c, recipientId)
}

// PutRecipientsRecipientId operation middleware
func (siw *ServerInterfaceWrapper) PutRecipientsRecipientId(c *gin.Context) {

	var err error

	// ------------- Path parameter "recipientId" -------------
	var recipientId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "recipientId", c.Param("recipientId"), &recipientId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter recipientId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutRecipientsRecipientId(c, recipientId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/beacons", wrapper.GetBeacons)

	router.DELETE(options.BaseURL+"/beacons/:beaconId", wrapper.DeleteBeaconsBeaconId)

	router.GET(options.BaseURL+"/beacons/:beaconId", wrapper.GetBeaconsBeaconId)

	router.POST(options.BaseURL+"/creator", wrapper.PostCreator)

	router.GET(options.BaseURL+"/groups", wrapper.GetGroups)

	router.POST(options.BaseURL+"/groups", wrapper.PostGroups)

	router.DELETE(options.BaseURL+"/groups/:groupId", wrapper.DeleteGroupsGroupId)

	router.GET(options.BaseURL+"/groups/:groupId", wrapper.GetGroupsGroupId)

	router.PUT(options.BaseURL+"/groups/:groupId", wrapper.PutGroupsGroupId)

	router.GET(options.BaseURL+"/recipients", wrapper.GetRecipients)

	router.POST(options.BaseURL+"/recipients", wrapper.PostRecipients)

	router.DELETE(options.BaseURL+"/recipients/:recipientId", wrapper.DeleteRecipientsRecipientId)

	router.GET(options.BaseURL+"/recipients/:recipientId", wrapper.GetRecipientsRecipientId)

	router.PUT(options.BaseURL+"/recipients/:recipientId", wrapper.PutRecipientsRecipientId)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"EoNj3SQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
