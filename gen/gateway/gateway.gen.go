// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Beacon defines model for Beacon.
type Beacon struct {
	Arch      *string             `json:"Arch,omitempty"`
	BeaconId  *openapi_types.UUID `json:"BeaconId,omitempty"`
	CreatedAt *time.Time          `json:"CreatedAt,omitempty"`
	DeletedAt *struct {
		Deleted bool      `json:"Deleted"`
		Time    time.Time `json:"Time"`
	} `json:"DeletedAt,omitempty"`
	GroupId    *openapi_types.UUID `json:"GroupId,omitempty"`
	Gzip       *bool               `json:"Gzip,omitempty"`
	ID         *openapi_types.UUID `json:"ID,omitempty"`
	OS         *string             `json:"OS,omitempty"`
	ReportAddr *string             `json:"ReportAddr,omitempty"`
	Static     *bool               `json:"Static,omitempty"`
	TenantID   *openapi_types.UUID `json:"TenantID,omitempty"`
	Transport  *string             `json:"Transport,omitempty"`
	UpdatedAt  *time.Time          `json:"UpdatedAt,omitempty"`
	Upx        *bool               `json:"Upx,omitempty"`
	UpxLevel   *int                `json:"UpxLevel,omitempty"`
}

// Dist defines model for Dist.
type Dist struct {
	Arch *string `json:"arch,omitempty"`
	Os   *string `json:"os,omitempty"`
}

// Event defines model for Event.
type Event struct {
	CreatedAt *time.Time `json:"CreatedAt,omitempty"`
	DeletedAt *struct {
		Deleted bool      `json:"Deleted"`
		Time    time.Time `json:"Time"`
	} `json:"DeletedAt,omitempty"`
	ID         *openapi_types.UUID `json:"ID,omitempty"`
	TenantID   *openapi_types.UUID `json:"TenantID,omitempty"`
	UpdatedAt  *time.Time          `json:"UpdatedAt,omitempty"`
	Arguments  *string             `json:"arguments,omitempty"`
	BeaconID   *openapi_types.UUID `json:"beaconID,omitempty"`
	BinaryName *string             `json:"binaryName,omitempty"`
	HostStat   *HostStat           `json:"hostStat,omitempty"`
	Interfaces *[]Interface        `json:"interfaces,omitempty"`
	NetStat    *[]NetStat          `json:"netStat,omitempty"`
	UserStat   *[]UserStat         `json:"userStat,omitempty"`
}

// Group defines model for Group.
type Group struct {
	Beacons   *[]Beacon  `json:"Beacons,omitempty"`
	CreatedAt *time.Time `json:"CreatedAt,omitempty"`
	DeletedAt *struct {
		Deleted bool      `json:"Deleted"`
		Time    time.Time `json:"Time"`
	} `json:"DeletedAt,omitempty"`
	Description *string             `json:"Description,omitempty"`
	ID          *openapi_types.UUID `json:"ID,omitempty"`
	Name        *string             `json:"Name,omitempty"`
	Priority    *int                `json:"Priority,omitempty"`
	Recipients  *[]Recipient        `json:"Recipients,omitempty"`
	TenantID    *openapi_types.UUID `json:"TenantID,omitempty"`
	UpdatedAt   *time.Time          `json:"UpdatedAt,omitempty"`
}

// HostStat defines model for HostStat.
type HostStat struct {
	CreatedAt *time.Time `json:"CreatedAt,omitempty"`
	DeletedAt *struct {
		Deleted bool      `json:"Deleted"`
		Time    time.Time `json:"Time"`
	} `json:"DeletedAt,omitempty"`
	ID                   *openapi_types.UUID `json:"ID,omitempty"`
	TenantID             *openapi_types.UUID `json:"TenantID,omitempty"`
	UpdatedAt            *time.Time          `json:"UpdatedAt,omitempty"`
	BootTime             *uint64             `json:"bootTime,omitempty"`
	EventID              *openapi_types.UUID `json:"eventID,omitempty"`
	HostID               *string             `json:"hostID,omitempty"`
	Hostname             *string             `json:"hostname,omitempty"`
	KernelArch           *string             `json:"kernelArch,omitempty"`
	KernelVersion        *string             `json:"kernelVersion,omitempty"`
	Os                   *string             `json:"os,omitempty"`
	Platform             *string             `json:"platform,omitempty"`
	PlatformFamily       *string             `json:"platformFamily,omitempty"`
	PlatformVersion      *string             `json:"platformVersion,omitempty"`
	Procs                *uint64             `json:"procs,omitempty"`
	Uptime               *uint64             `json:"uptime,omitempty"`
	VirtualizationRole   *string             `json:"virtualizationRole,omitempty"`
	VirtualizationSystem *string             `json:"virtualizationSystem,omitempty"`
}

// Interface defines model for Interface.
type Interface struct {
	CreatedAt *time.Time `json:"CreatedAt,omitempty"`
	DeletedAt *struct {
		Deleted bool      `json:"Deleted"`
		Time    time.Time `json:"Time"`
	} `json:"DeletedAt,omitempty"`
	ID          *openapi_types.UUID `json:"ID,omitempty"`
	TenantID    *openapi_types.UUID `json:"TenantID,omitempty"`
	UpdatedAt   *time.Time          `json:"UpdatedAt,omitempty"`
	EventID     *openapi_types.UUID `json:"eventID,omitempty"`
	IpAddresses *string             `json:"ipAddresses,omitempty"`
	Name        *string             `json:"name,omitempty"`
}

// NetStat defines model for NetStat.
type NetStat struct {
	CreatedAt *time.Time `json:"CreatedAt,omitempty"`
	DeletedAt *struct {
		Deleted bool      `json:"Deleted"`
		Time    time.Time `json:"Time"`
	} `json:"DeletedAt,omitempty"`
	ID            *openapi_types.UUID `json:"ID,omitempty"`
	TenantID      *openapi_types.UUID `json:"TenantID,omitempty"`
	UpdatedAt     *time.Time          `json:"UpdatedAt,omitempty"`
	EventID       *openapi_types.UUID `json:"eventID,omitempty"`
	LocalAddress  *string             `json:"localAddress,omitempty"`
	RemoteAddress *string             `json:"remoteAddress,omitempty"`
	Status        *string             `json:"status,omitempty"`
}

// Recipient defines model for Recipient.
type Recipient struct {
	ContactInfo *string    `json:"ContactInfo,omitempty"`
	CreatedAt   *time.Time `json:"CreatedAt,omitempty"`
	DeletedAt   *struct {
		Deleted bool      `json:"Deleted"`
		Time    time.Time `json:"Time"`
	} `json:"DeletedAt,omitempty"`
	Description *string             `json:"Description,omitempty"`
	Groups      *[]Group            `json:"Groups,omitempty"`
	ID          *openapi_types.UUID `json:"ID,omitempty"`
	Name        *string             `json:"Name,omitempty"`
	TenantID    *openapi_types.UUID `json:"TenantID,omitempty"`
	Type        *string             `json:"Type,omitempty"`
	UpdatedAt   *time.Time          `json:"UpdatedAt,omitempty"`
}

// TenantBaseModel defines model for TenantBaseModel.
type TenantBaseModel struct {
	CreatedAt *time.Time `json:"CreatedAt,omitempty"`
	DeletedAt *struct {
		Deleted bool      `json:"Deleted"`
		Time    time.Time `json:"Time"`
	} `json:"DeletedAt,omitempty"`
	ID        *openapi_types.UUID `json:"ID,omitempty"`
	TenantID  *openapi_types.UUID `json:"TenantID,omitempty"`
	UpdatedAt *time.Time          `json:"UpdatedAt,omitempty"`
}

// UserStat defines model for UserStat.
type UserStat struct {
	CreatedAt *time.Time `json:"CreatedAt,omitempty"`
	DeletedAt *struct {
		Deleted bool      `json:"Deleted"`
		Time    time.Time `json:"Time"`
	} `json:"DeletedAt,omitempty"`
	ID        *openapi_types.UUID `json:"ID,omitempty"`
	TenantID  *openapi_types.UUID `json:"TenantID,omitempty"`
	UpdatedAt *time.Time          `json:"UpdatedAt,omitempty"`
	EventID   *openapi_types.UUID `json:"eventID,omitempty"`
	Host      *string             `json:"host,omitempty"`
	Started   *uint32             `json:"started,omitempty"`
	Terminal  *string             `json:"terminal,omitempty"`
	User      *string             `json:"user,omitempty"`
}

// Arch defines model for Arch.
type Arch = string

// BeaconUUID defines model for BeaconUUID.
type BeaconUUID = openapi_types.UUID

// Debug defines model for Debug.
type Debug = bool

// GroupUUID defines model for GroupUUID.
type GroupUUID = openapi_types.UUID

// Gzip defines model for Gzip.
type Gzip = bool

// Lldflags defines model for Lldflags.
type Lldflags = string

// OS defines model for OS.
type OS = string

// ReportAddr defines model for ReportAddr.
type ReportAddr = string

// Static defines model for Static.
type Static = bool

// Transport defines model for Transport.
type Transport = string

// Upx defines model for Upx.
type Upx = bool

// UpxLevel defines model for UpxLevel.
type UpxLevel = int

// BeaconId Unique identifier of the beacon on UUID format
type BeaconId = openapi_types.UUID

// EventId Unique identifier of the event on UUID format
type EventId = openapi_types.UUID

// GroupId Unique identifier of the group on UUID format
type GroupId = openapi_types.UUID

// RecipientId Unique identifier of the recipient on UUID format
type RecipientId = openapi_types.UUID

// Error defines model for Error.
type Error struct {
	// Code A unique error code for the specific type of error
	Code string `json:"code"`

	// Message A human-readable error message describing the error
	Message string `json:"message"`
}

// AddRecipientsToGroup defines model for AddRecipientsToGroup.
type AddRecipientsToGroup = []openapi_types.UUID

// CreateGroup defines model for CreateGroup.
type CreateGroup struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// CreateRecipient defines model for CreateRecipient.
type CreateRecipient struct {
	ContactInfo string  `json:"contactInfo"`
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
	Type        string  `json:"type"`
}

// UpdateGroup defines model for UpdateGroup.
type UpdateGroup struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// UpdateRecipient defines model for UpdateRecipient.
type UpdateRecipient struct {
	ContactInfo string  `json:"contactInfo"`
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
	Type        string  `json:"type"`
}

// PostCreatorParams defines parameters for PostCreator.
type PostCreatorParams struct {
	// ReportAddr The URL of the report server.
	ReportAddr ReportAddr `form:"report_addr" json:"report_addr"`

	// Os The operating system of the beacon.
	Os OS `form:"os" json:"os"`

	// Arch The architecture of the beacon.
	Arch Arch `form:"arch" json:"arch"`

	// BeaconUuid The UUID of the beacon.
	BeaconUuid *BeaconUUID `form:"beacon_uuid,omitempty" json:"beacon_uuid,omitempty"`

	// GroupUuid The UUID of the group.
	GroupUuid *GroupUUID `form:"group_uuid,omitempty" json:"group_uuid,omitempty"`

	// Static Indicates if the beacon is static.
	Static *Static `form:"static,omitempty" json:"static,omitempty"`

	// Upx Indicates if the beacon is compressed using UPX.
	Upx *Upx `form:"upx,omitempty" json:"upx,omitempty"`

	// UpxLevel The compression level used by UPX.
	UpxLevel *UpxLevel `form:"upx_level,omitempty" json:"upx_level,omitempty"`

	// Gzip Indicates if the beacon is compressed using Gzip.
	Gzip *Gzip `form:"gzip,omitempty" json:"gzip,omitempty"`

	// Debug Include debug information in the beacon
	Debug *Debug `form:"debug,omitempty" json:"debug,omitempty"`

	// Lldflags The lldflags used to build the beacon.
	Lldflags *Lldflags `form:"lldflags,omitempty" json:"lldflags,omitempty"`

	// Transport The transport protocol used by the beacon.
	Transport *Transport `form:"transport,omitempty" json:"transport,omitempty"`
}

// PostGroupsJSONBody defines parameters for PostGroups.
type PostGroupsJSONBody struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// PutGroupsGroupIdJSONBody defines parameters for PutGroupsGroupId.
type PutGroupsGroupIdJSONBody struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// PostGroupsGroupIdRecipientsJSONBody defines parameters for PostGroupsGroupIdRecipients.
type PostGroupsGroupIdRecipientsJSONBody = []openapi_types.UUID

// PostRecipientsJSONBody defines parameters for PostRecipients.
type PostRecipientsJSONBody struct {
	ContactInfo string  `json:"contactInfo"`
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
	Type        string  `json:"type"`
}

// PutRecipientsRecipientIdJSONBody defines parameters for PutRecipientsRecipientId.
type PutRecipientsRecipientIdJSONBody struct {
	ContactInfo string  `json:"contactInfo"`
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
	Type        string  `json:"type"`
}

// PostGroupsJSONRequestBody defines body for PostGroups for application/json ContentType.
type PostGroupsJSONRequestBody PostGroupsJSONBody

// PutGroupsGroupIdJSONRequestBody defines body for PutGroupsGroupId for application/json ContentType.
type PutGroupsGroupIdJSONRequestBody PutGroupsGroupIdJSONBody

// PostGroupsGroupIdRecipientsJSONRequestBody defines body for PostGroupsGroupIdRecipients for application/json ContentType.
type PostGroupsGroupIdRecipientsJSONRequestBody = PostGroupsGroupIdRecipientsJSONBody

// PostRecipientsJSONRequestBody defines body for PostRecipients for application/json ContentType.
type PostRecipientsJSONRequestBody PostRecipientsJSONBody

// PutRecipientsRecipientIdJSONRequestBody defines body for PutRecipientsRecipientId for application/json ContentType.
type PutRecipientsRecipientIdJSONRequestBody PutRecipientsRecipientIdJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all beacons
	// (GET /beacons)
	GetBeacons(c *gin.Context)
	// Get a specific beacon by ID
	// (GET /beacons/{beaconId})
	GetBeaconsBeaconId(c *gin.Context, beaconId BeaconId)
	// Create a new beacon.
	// (POST /creator)
	PostCreator(c *gin.Context, params PostCreatorParams)
	// List all supported OS and Arch combinations
	// (GET /creator/distlist)
	GetCreatorDistlist(c *gin.Context)
	// Retrieve a specific event by ID
	// (GET /events/{eventId})
	GetEventsEventId(c *gin.Context, eventId EventId)
	// Retrieve the group for a specific event
	// (GET /events/{eventId}/group)
	GetEventsEventIdGroup(c *gin.Context, eventId EventId)
	// Retrieve a list of recipients for a specific event
	// (GET /events/{eventId}/recipients)
	GetEventsEventIdRecipients(c *gin.Context, eventId EventId)
	// List all groups
	// (GET /groups)
	GetGroups(c *gin.Context)
	// Create a new group
	// (POST /groups)
	PostGroups(c *gin.Context)
	// Delete a group by ID
	// (DELETE /groups/{groupId})
	DeleteGroupsGroupId(c *gin.Context, groupId GroupId)
	// Retrieve a specific group by ID
	// (GET /groups/{groupId})
	GetGroupsGroupId(c *gin.Context, groupId GroupId)
	// Update a group's name, description, and recipient list
	// (PUT /groups/{groupId})
	PutGroupsGroupId(c *gin.Context, groupId GroupId)
	// List all events for a group
	// (GET /groups/{groupId}/events)
	GetGroupsGroupIdEvents(c *gin.Context, groupId GroupId)
	// Add a recipient to a group
	// (POST /groups/{groupId}/recipients)
	PostGroupsGroupIdRecipients(c *gin.Context, groupId GroupId)
	// Remove a recipient from a group
	// (DELETE /groups/{groupId}/recipients/{recipientId})
	DeleteGroupsGroupIdRecipientsRecipientId(c *gin.Context, groupId GroupId, recipientId RecipientId)
	// List all recipients
	// (GET /recipients)
	GetRecipients(c *gin.Context)
	// Create a new recipient
	// (POST /recipients)
	PostRecipients(c *gin.Context)
	// Delete a recipient by ID
	// (DELETE /recipients/{recipientId})
	DeleteRecipientsRecipientId(c *gin.Context, recipientId RecipientId)
	// Get a specific recipient by ID
	// (GET /recipients/{recipientId})
	GetRecipientsRecipientId(c *gin.Context, recipientId RecipientId)
	// Update an existing recipient
	// (PUT /recipients/{recipientId})
	PutRecipientsRecipientId(c *gin.Context, recipientId RecipientId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetBeacons operation middleware
func (siw *ServerInterfaceWrapper) GetBeacons(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetBeacons(c)
}

// GetBeaconsBeaconId operation middleware
func (siw *ServerInterfaceWrapper) GetBeaconsBeaconId(c *gin.Context) {

	var err error

	// ------------- Path parameter "beaconId" -------------
	var beaconId BeaconId

	err = runtime.BindStyledParameter("simple", false, "beaconId", c.Param("beaconId"), &beaconId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter beaconId: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetBeaconsBeaconId(c, beaconId)
}

// PostCreator operation middleware
func (siw *ServerInterfaceWrapper) PostCreator(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostCreatorParams

	// ------------- Required query parameter "report_addr" -------------

	if paramValue := c.Query("report_addr"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument report_addr is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "report_addr", c.Request.URL.Query(), &params.ReportAddr)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter report_addr: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "os" -------------

	if paramValue := c.Query("os"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument os is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "os", c.Request.URL.Query(), &params.Os)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter os: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "arch" -------------

	if paramValue := c.Query("arch"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument arch is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "arch", c.Request.URL.Query(), &params.Arch)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter arch: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "beacon_uuid" -------------

	err = runtime.BindQueryParameter("form", true, false, "beacon_uuid", c.Request.URL.Query(), &params.BeaconUuid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter beacon_uuid: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "group_uuid" -------------

	err = runtime.BindQueryParameter("form", true, false, "group_uuid", c.Request.URL.Query(), &params.GroupUuid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter group_uuid: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "static" -------------

	err = runtime.BindQueryParameter("form", true, false, "static", c.Request.URL.Query(), &params.Static)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter static: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "upx" -------------

	err = runtime.BindQueryParameter("form", true, false, "upx", c.Request.URL.Query(), &params.Upx)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter upx: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "upx_level" -------------

	err = runtime.BindQueryParameter("form", true, false, "upx_level", c.Request.URL.Query(), &params.UpxLevel)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter upx_level: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gzip" -------------

	err = runtime.BindQueryParameter("form", true, false, "gzip", c.Request.URL.Query(), &params.Gzip)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gzip: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "debug" -------------

	err = runtime.BindQueryParameter("form", true, false, "debug", c.Request.URL.Query(), &params.Debug)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter debug: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "lldflags" -------------

	err = runtime.BindQueryParameter("form", true, false, "lldflags", c.Request.URL.Query(), &params.Lldflags)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter lldflags: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "transport" -------------

	err = runtime.BindQueryParameter("form", true, false, "transport", c.Request.URL.Query(), &params.Transport)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter transport: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostCreator(c, params)
}

// GetCreatorDistlist operation middleware
func (siw *ServerInterfaceWrapper) GetCreatorDistlist(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetCreatorDistlist(c)
}

// GetEventsEventId operation middleware
func (siw *ServerInterfaceWrapper) GetEventsEventId(c *gin.Context) {

	var err error

	// ------------- Path parameter "eventId" -------------
	var eventId EventId

	err = runtime.BindStyledParameter("simple", false, "eventId", c.Param("eventId"), &eventId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter eventId: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetEventsEventId(c, eventId)
}

// GetEventsEventIdGroup operation middleware
func (siw *ServerInterfaceWrapper) GetEventsEventIdGroup(c *gin.Context) {

	var err error

	// ------------- Path parameter "eventId" -------------
	var eventId EventId

	err = runtime.BindStyledParameter("simple", false, "eventId", c.Param("eventId"), &eventId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter eventId: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetEventsEventIdGroup(c, eventId)
}

// GetEventsEventIdRecipients operation middleware
func (siw *ServerInterfaceWrapper) GetEventsEventIdRecipients(c *gin.Context) {

	var err error

	// ------------- Path parameter "eventId" -------------
	var eventId EventId

	err = runtime.BindStyledParameter("simple", false, "eventId", c.Param("eventId"), &eventId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter eventId: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetEventsEventIdRecipients(c, eventId)
}

// GetGroups operation middleware
func (siw *ServerInterfaceWrapper) GetGroups(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetGroups(c)
}

// PostGroups operation middleware
func (siw *ServerInterfaceWrapper) PostGroups(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostGroups(c)
}

// DeleteGroupsGroupId operation middleware
func (siw *ServerInterfaceWrapper) DeleteGroupsGroupId(c *gin.Context) {

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId GroupId

	err = runtime.BindStyledParameter("simple", false, "groupId", c.Param("groupId"), &groupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter groupId: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteGroupsGroupId(c, groupId)
}

// GetGroupsGroupId operation middleware
func (siw *ServerInterfaceWrapper) GetGroupsGroupId(c *gin.Context) {

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId GroupId

	err = runtime.BindStyledParameter("simple", false, "groupId", c.Param("groupId"), &groupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter groupId: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetGroupsGroupId(c, groupId)
}

// PutGroupsGroupId operation middleware
func (siw *ServerInterfaceWrapper) PutGroupsGroupId(c *gin.Context) {

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId GroupId

	err = runtime.BindStyledParameter("simple", false, "groupId", c.Param("groupId"), &groupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter groupId: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutGroupsGroupId(c, groupId)
}

// GetGroupsGroupIdEvents operation middleware
func (siw *ServerInterfaceWrapper) GetGroupsGroupIdEvents(c *gin.Context) {

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId GroupId

	err = runtime.BindStyledParameter("simple", false, "groupId", c.Param("groupId"), &groupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter groupId: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetGroupsGroupIdEvents(c, groupId)
}

// PostGroupsGroupIdRecipients operation middleware
func (siw *ServerInterfaceWrapper) PostGroupsGroupIdRecipients(c *gin.Context) {

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId GroupId

	err = runtime.BindStyledParameter("simple", false, "groupId", c.Param("groupId"), &groupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter groupId: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostGroupsGroupIdRecipients(c, groupId)
}

// DeleteGroupsGroupIdRecipientsRecipientId operation middleware
func (siw *ServerInterfaceWrapper) DeleteGroupsGroupIdRecipientsRecipientId(c *gin.Context) {

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId GroupId

	err = runtime.BindStyledParameter("simple", false, "groupId", c.Param("groupId"), &groupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter groupId: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "recipientId" -------------
	var recipientId RecipientId

	err = runtime.BindStyledParameter("simple", false, "recipientId", c.Param("recipientId"), &recipientId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter recipientId: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteGroupsGroupIdRecipientsRecipientId(c, groupId, recipientId)
}

// GetRecipients operation middleware
func (siw *ServerInterfaceWrapper) GetRecipients(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetRecipients(c)
}

// PostRecipients operation middleware
func (siw *ServerInterfaceWrapper) PostRecipients(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostRecipients(c)
}

// DeleteRecipientsRecipientId operation middleware
func (siw *ServerInterfaceWrapper) DeleteRecipientsRecipientId(c *gin.Context) {

	var err error

	// ------------- Path parameter "recipientId" -------------
	var recipientId RecipientId

	err = runtime.BindStyledParameter("simple", false, "recipientId", c.Param("recipientId"), &recipientId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter recipientId: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteRecipientsRecipientId(c, recipientId)
}

// GetRecipientsRecipientId operation middleware
func (siw *ServerInterfaceWrapper) GetRecipientsRecipientId(c *gin.Context) {

	var err error

	// ------------- Path parameter "recipientId" -------------
	var recipientId RecipientId

	err = runtime.BindStyledParameter("simple", false, "recipientId", c.Param("recipientId"), &recipientId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter recipientId: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetRecipientsRecipientId(c, recipientId)
}

// PutRecipientsRecipientId operation middleware
func (siw *ServerInterfaceWrapper) PutRecipientsRecipientId(c *gin.Context) {

	var err error

	// ------------- Path parameter "recipientId" -------------
	var recipientId RecipientId

	err = runtime.BindStyledParameter("simple", false, "recipientId", c.Param("recipientId"), &recipientId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter recipientId: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutRecipientsRecipientId(c, recipientId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/beacons", wrapper.GetBeacons)

	router.GET(options.BaseURL+"/beacons/:beaconId", wrapper.GetBeaconsBeaconId)

	router.POST(options.BaseURL+"/creator", wrapper.PostCreator)

	router.GET(options.BaseURL+"/creator/distlist", wrapper.GetCreatorDistlist)

	router.GET(options.BaseURL+"/events/:eventId", wrapper.GetEventsEventId)

	router.GET(options.BaseURL+"/events/:eventId/group", wrapper.GetEventsEventIdGroup)

	router.GET(options.BaseURL+"/events/:eventId/recipients", wrapper.GetEventsEventIdRecipients)

	router.GET(options.BaseURL+"/groups", wrapper.GetGroups)

	router.POST(options.BaseURL+"/groups", wrapper.PostGroups)

	router.DELETE(options.BaseURL+"/groups/:groupId", wrapper.DeleteGroupsGroupId)

	router.GET(options.BaseURL+"/groups/:groupId", wrapper.GetGroupsGroupId)

	router.PUT(options.BaseURL+"/groups/:groupId", wrapper.PutGroupsGroupId)

	router.GET(options.BaseURL+"/groups/:groupId/events", wrapper.GetGroupsGroupIdEvents)

	router.POST(options.BaseURL+"/groups/:groupId/recipients", wrapper.PostGroupsGroupIdRecipients)

	router.DELETE(options.BaseURL+"/groups/:groupId/recipients/:recipientId", wrapper.DeleteGroupsGroupIdRecipientsRecipientId)

	router.GET(options.BaseURL+"/recipients", wrapper.GetRecipients)

	router.POST(options.BaseURL+"/recipients", wrapper.PostRecipients)

	router.DELETE(options.BaseURL+"/recipients/:recipientId", wrapper.DeleteRecipientsRecipientId)

	router.GET(options.BaseURL+"/recipients/:recipientId", wrapper.GetRecipientsRecipientId)

	router.PUT(options.BaseURL+"/recipients/:recipientId", wrapper.PutRecipientsRecipientId)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
